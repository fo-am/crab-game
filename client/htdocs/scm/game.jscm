;; -*- mode: scheme; -*-
; ------------------------------------------------
;; Copyright (C) 2016 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(load "scm/maths.jscm")
(load "scm/random.jscm")
(load "scm/nightjar.jscm")

(define game-time-allowed 10)
(define num-examples 20)

(define rockpool-filenames
  (list
   "gylly/DSC_5837.jpg"
   "gylly/DSC_5844.jpg"
   "gylly/DSC_5850.jpg"
   "gylly/DSC_5860.jpg"
   "gylly/DSC_5864.jpg"
   "gylly/DSC_5907.jpg"
   "gylly/SAM_4382.jpg"
   "gylly/SAM_4700.jpg"
   "gylly/SAM_4724.jpg"
   "gylly/SAM_4775.jpg"
   "gylly/SAM_4787.jpg"
   "gylly/SAM_4907.jpg"
   "gylly/SAM_4946.jpg"
   "gylly/SAM_5100.jpg"
   "gylly/SAM_5112.jpg"
   "gylly/SAM_5124.jpg"
    ))

(define mudflat-filenames
   (list
    "penryn/DSC_5739.jpg"
    "penryn/DSC_5748.jpg"
    "penryn/DSC_5759.jpg"
    "penryn/DSC_5764.jpg"
    "penryn/DSC_5769.jpg"
    "penryn/DSC_5773.jpg"
    "penryn/DSC_5778.jpg"
    "penryn/DSC_5784.jpg"
    "penryn/DSC_5788.jpg"
    "penryn/DSC_5805.jpg"
    "penryn/SAM_5340.jpg"
    "penryn/SAM_5352.jpg"
    "penryn/SAM_5388.jpg"
    "penryn/SAM_5400.jpg"
    "penryn/SAM_5412.jpg"
    "penryn/SAM_5427.jpg"
    "penryn/SAM_5439.jpg"
    "penryn/SAM_5463.jpg"
    "penryn/SAM_5487.jpg"
    "penryn/SAM_5532.jpg"
    ))

(define musselbed-filenames
   (list
   "gylly/DSC_5837.jpg"
   "gylly/DSC_5844.jpg"
   "gylly/DSC_5850.jpg"
   "gylly/DSC_5860.jpg"
   "gylly/DSC_5864.jpg"
   "gylly/DSC_5907.jpg"
   "gylly/SAM_4382.jpg"
   "gylly/SAM_4700.jpg"
   "gylly/SAM_4724.jpg"
   "gylly/SAM_4775.jpg"
   "gylly/SAM_4787.jpg"
   "gylly/SAM_4907.jpg"
   "gylly/SAM_4946.jpg"
   "gylly/SAM_5100.jpg"
   "gylly/SAM_5112.jpg"
   "gylly/SAM_5124.jpg"
    ))


(define crab-filenames
  (build-list
   28 (lambda (i)
        (string-append "autocrab-" i ".png"))))

(define (filename-to-type fn)
  (let ((a (fn.substring 0 2)))
    (cond
     ((eq? a "pe") "the Penryn river")
     ((eq? a "gy") "Gyllyngvase beach")
     (else
      "unknown beach"))))

(define filenames
  (list
   (map (lambda (f) (list (string-append "rockpool/" f) (filename-to-type f))) rockpool-filenames)
   (map (lambda (f) (list (string-append "rockpool/di-" f) (filename-to-type f))) rockpool-filenames)
   (map (lambda (f) (list (string-append "mudflat/" f) (filename-to-type f))) mudflat-filenames)
   (map (lambda (f) (list (string-append "mudflat/di-" f) (filename-to-type f))) mudflat-filenames)
   (map (lambda (f) (list (string-append "musselbed/" f) (filename-to-type f))) musselbed-filenames)
   (map (lambda (f) (list (string-append "musselbed/di-" f) (filename-to-type f))) musselbed-filenames)
   (map (lambda (f) (list (string-append "crabs/" f) (filename-to-type f))) crab-filenames)
   (map (lambda (f) (list (string-append "crabs/di-" f) (filename-to-type f))) crab-filenames)
   ))

(define (photo-filename l) (list-ref l 0))
(define (photo-desc l) (list-ref l 1))

(define photos
  (map
   (lambda (l)
     (map
      (lambda (fn)
        (list
         (+ "photos/" (car fn))
         (cadr fn))) l))
   filenames))

(define (rockpool-photos l) (list-ref l 0))
(define (rockpool-dic-photos l) (list-ref l 1))
(define (mudflat-photos l) (list-ref l 2))
(define (mudflat-dic-photos l) (list-ref l 3))
(define (musselbed-photos l) (list-ref l 4))
(define (musselbed-dic-photos l) (list-ref l 5))
(define (crab-photos l) (list-ref l 6))
(define (crab-dic-photos l) (list-ref l 7))

(define (button-image)
  (find-image (choose (list "button-1.png" "button-2.png" "button-3.png"))))

(define (small-button-image)
  (find-image (choose (list "button-s1.png"))))


;; get from image structure
(define image-width (* screen-width 1))
(define image-height (* screen-height 1))
(define image-centre-x (/ image-width 2))
(define image-centre-y (/ image-height 2))

(define safe-x 0.2)
(define safe-y 0.2)
(define safe-x-px (* safe-x image-width))
(define safe-y-px (* safe-y image-height))

;; (define (generate-image-pos)
;;   (list (- (* screen-width (+ safe-x (* (rndf) (- 1 (* safe-x 2))))) image-centre-x)
;;         (- (* screen-height (+ safe-y (* (rndf) (- 1 (* safe-y 2))))) image-centre-y)))

(define (generate-crab-pos)
  (list (+ safe-x-px
           (* (rndf) (- image-width (* safe-x-px 2))))
        (+ safe-y-px
           (* (rndf) (- image-height (* safe-y-px 2))))))

(define default-button-x (- (/ screen-width 2) 0))
(define default-button-y (+ (/ screen-height 2) 120))
(define button-gap 250)

(define (empty-nightjar-data)
  (list 0 0 0 "" #f 0 () () 0 (sprite 0 0 "wrong.png" 0) 0 "???" () 0 0))

(define (nightjar-start-time g) (list-ref g 0))
(define (nightjar-modify-start-time v g) (list-replace g 0 v))
(define (nightjar-photo-time g) (list-ref g 1))
(define (nightjar-modify-photo-time v g) (list-replace g 1 v))
(define (nightjar-player-id g) (list-ref g 2))
(define (nightjar-modify-player-id v g) (list-replace g 2 v))
(define (nightjar-player-type g) (list-ref g 3))
(define (nightjar-modify-player-type v g) (list-replace g 3 v))
(define (nightjar-played-before g) (list-ref g 4))
(define (nightjar-modify-played-before v g) (list-replace g 4 v))
(define (nightjar-player-age g) (list-ref g 5))
(define (nightjar-modify-player-age v g) (list-replace g 5 v))
(define (nightjar-images g) (list-ref g 6))
(define (nightjar-modify-images v g) (list-replace g 6 v))
(define (nightjar-crab-pos g) (list-ref g 7))
(define (nightjar-modify-crab-pos v g) (list-replace g 7 v))
(define (nightjar-score g) (list-ref g 8))
(define (nightjar-modify-score v g) (list-replace g 8 v))
(define (nightjar-sprite g) (list-ref g 9))
(define (nightjar-modify-sprite v g) (list-replace g 9 v))
(define (nightjar-level g) (list-ref g 10))
(define (nightjar-modify-level v g) (list-replace g 10 v))
(define (nightjar-username g) (list-ref g 11))
(define (nightjar-modify-username v g) (list-replace g 11 v))
(define (nightjar-crabs g) (list-ref g 12))
(define (nightjar-modify-crabs v g) (list-replace g 12 v))
(define (nightjar-crab-rotation g) (list-ref g 13))
(define (nightjar-modify-crab-rotation v g) (list-replace g 13 v))
(define (nightjar-game-id g) (list-ref g 14))
(define (nightjar-modify-game-id v g) (list-replace g 14 v))

(define (time-left c)
  (* (- (game-time c)
        (nightjar-start-time (game-data c)))
     0.001))

;; setup new game
(define (nightjar-new-game c)
  (nightjar-game
   (game-modify-data
    (lambda (d)
      (nightjar-modify-start-time
       (game-time c)
       (nightjar-modify-crab-rotation
        (* 2 (rndf) 3.141) ; good enuf
        (nightjar-modify-crab-pos
         (generate-crab-pos)
         (nightjar-modify-sprite
          (sprite -999 -999 "right.png" 0)
          d)))))
    c)))

;; load images and reset (calling new-game above)
(define (nightjar-new-game-reset-timer c)
  ;; start image load
  (load-images-mutate
   (lambda (c)
     (msg "new-game-reset-timer")
     (nightjar-new-game
      (game-modify-data
       (lambda (d)
         ;; now loaded - remove previous images and set photo time
         (nightjar-modify-images
          (cdr (nightjar-images d))
          (nightjar-modify-crabs
           (cdr (nightjar-crabs d))
           (nightjar-modify-photo-time
            (game-time c) d))))
       c)))
   (list
    ;; load the *next* images
    (photo-filename (list-ref (nightjar-images (game-data c)) 1))
    (photo-filename (list-ref (nightjar-crabs (game-data c)) 1))))
  ;; set up loading screen before loading
  (game-modify-buttons
   ()
   (game-modify-render
    (lambda (ctx)
      (let ((example (car (nightjar-images (game-data c)))))
        (ctx.drawImage
         (find-image (photo-filename example))
         0 0)
        (nightjar-all-text ctx "Loading your next crab...")))
    c)))

(define (nightjar-new-game-images c)
  (let ((backgrounds
         (cond
          ((eq? (nightjar-player-type (game-data c)) "goby")
           (cond
            ((eq? (nightjar-level (game-data c)) 0)
             (rockpool-photos photos))
            ((eq? (nightjar-level (game-data c)) 1)
             (mudflat-photos photos))
            (else
             (musselbed-photos photos))))
          (else
           (cond
            ((eq? (nightjar-level (game-data c)) 0)
             (rockpool-dic-photos photos))
            ((eq? (nightjar-level (game-data c)) 1)
             (mudflat-dic-photos photos))
            (else
             (musselbed-dic-photos photos))))))
        (crab-images
         (cond
          ((eq? (nightjar-player-type (game-data c)) "goby")
           (crab-photos photos))
          (else
           (msg "other")
           (crab-dic-photos photos)))))

    (play-sound "button.wav")

    (let ((images (crop (shuffle backgrounds) num-examples))
          (crab-images (crop (shuffle crab-images) num-examples)))
      (load-images-mutate
       (lambda (c)
         (nightjar-new-game
          (game-modify-data
           (lambda (d)
             (nightjar-modify-photo-time
              (game-time c)
              (nightjar-modify-images
               images (nightjar-modify-crabs crab-images d))))
           c)))
       (list
        (photo-filename (list-ref images 0))
        (photo-filename (list-ref crab-images 0))))
      (game-modify-buttons
       ()
       (game-modify-render
        (lambda (ctx)
          (nightjar-all-text ctx "Loading your first crab..."))
        c)))))

(define (random-weed)
  (choose (list
           "cutoutweed.png"
           "cutoutweed2.png"
           "cutoutweed3.png"
           "cutoutweed4.png"
           "cutoutweed5.png"
           "cutoutweed6.png"
           "cutoutweed7.png"
           "cutoutweed8.png"
           )))

(define pos-list
  (build-list
   25 (lambda (i)
        (list (* (rndf) screen-width)
              (* (rndf) screen-height)
              (rndf)
              (random-weed)))))


(define (draw-weed ctx c)
  (ctx.save)
  (set! ctx.globalAlpha 0.3)
  (for-each
   (lambda (pos)
     (let ((img (find-image (list-ref pos 3))))
       (ctx.save)
       (ctx.translate (car pos) screen-height)
;;       (ctx.translate (/ img.width 2) img.height)
       (ctx.scale
        (+ (list-ref pos 2) 0.5)
        (+ (list-ref pos 2) 0.5))

       (ctx.rotate (* 0.02 (sin (+ (* (list-ref pos 2) 5)
                                   (* 0.001 (game-time c))))))
;;       (ctx.translate (- 0 (/ img.width 2)) (- 0 img.height))
       (ctx.drawImage img (/ -img.width 2) -img.height)
       (ctx.restore)))
   pos-list)
  (ctx.restore))

(define (nightjar-intro c)
  (let ((icon-x 150)
        (icon-y (+ default-button-y 100)))
  (game-modify-data
   (lambda (d)
     (empty-nightjar-data))
   (game-modify-render
    (lambda (ctx)
      (draw-weed ctx c)

      (nightjar-heading ctx "Crab game title")
      (nightjar-text ctx "Hunt for crabs and help sensory research")
      (set! ctx.font "normal 30pt open-sans"))

    (game-modify-buttons
     (list
      (image-button
       "Start playing"
       (- default-button-x 200)
       default-button-y
       "rotate"
       (button-image)
       (lambda (c)
         (play-sound "button.wav")
         (nightjar-experiment-screen c)))

      (image-button
       "High Scores"
       (+ default-button-x 200)
       default-button-y
       "rotate"
       (button-image)
       (lambda (c)
         (server-call-mutate
          "hiscores" ()
          (lambda (game data)
            (let ((hiscores (JSON.parse data)))
              (nightjar-hiscores hiscores #t game))))
         (play-sound "button.wav")
         c))


      )
     c)))))

(define (time-to-seconds t)
  (/ (Math.floor (/ t 10)) 100))

(define (nightjar-hiscores table ret-to-intro c)
  (game-modify-update
   (lambda (t c) c)
   (game-modify-render
    (lambda (ctx)
      (draw-weed ctx c)
      (set! ctx.font "normal 50pt open-sans")
      (wrap-text ctx (string-append "Hall of fame") 0 100 1000 70)
      (set! ctx.font "normal 30pt open-sans")

      (wrap-text ctx "Rockpool" -300 180)
      (wrap-text ctx "Mudflats" 0 180)
      (wrap-text ctx "Musselbed" 300 180)

      (when (list-ref table 0)
            (index-for-each
             (lambda (i e)
               (let ((txt (string-append (car e) " : " (time-to-seconds (cadr e)))))
                 (wrap-text ctx txt -300 (+ 240 (* 40 i)))))
             (list-ref table 0)))

      (when (list-ref table 1)
            (index-for-each
             (lambda (i e)
               (let ((txt (string-append (car e) " : " (time-to-seconds (cadr e)))))
                 (wrap-text ctx txt 0 (+ 240 (* 40 i)))))
             (list-ref table 1)))

      (when (list-ref table 2)
            (index-for-each
             (lambda (i e)
               (let ((txt (string-append (car e) " : " (time-to-seconds (cadr e)))))
                 (wrap-text ctx txt 300 (+ 240 (* 40 i)))))
             (list-ref table 2)))
      )
    (game-modify-buttons
     (list
      (image-button
       "Back" 1150 720 "rotate" (button-image)
       (lambda (c)
         (if ret-to-intro
             (nightjar-intro c)
             (nightjar-species-other-screen c)))))
     c))))


(define (nightjar-experiment-screen c)
  (game-modify-render
   (lambda (ctx)
     (draw-weed ctx c)
     (nightjar-all-text ctx "We would like to use results from your game for a scientific publication, is that ok?")
     (set! ctx.font "normal 30pt open-sans")
     (wrap-text ctx "We are using age and timing information" 0 450 1000 75))

   (game-modify-buttons
    (list

     (image-button
      "Yes that's fine"
      (+ default-button-x button-gap)
      default-button-y
      "rotate"
      (button-image)
      (lambda (c)
        (play-sound "button.wav")
        (nightjar-age-screen c)))

     (image-button
      "Back"
      (- default-button-x button-gap)
      default-button-y
      "rotate"
      (button-image)
      (lambda (c)
        (play-sound "button.wav")
        (nightjar-intro c))))
    c)))

(define (nightjar-age-screen c)
  (game-modify-render
   (lambda (ctx)
     (draw-weed ctx c)
     (nightjar-all-text ctx "What is your age?")
     (set! ctx.font "normal 30pt open-sans"))
   (game-modify-buttons
    (let ((age-but
           (lambda (title id)
             (image-button
              title
              (+ (- default-button-x 750) (* id 250))
              default-button-y
              "rotate"
              (small-button-image)
              (lambda (c)
                (play-sound "button.wav")
                (game-modify-data
                 (lambda (d)
                   (nightjar-modify-player-age
                    id d))
                 (nightjar-played-before-screen c)))))))

      (list
       (age-but "Younger than 10" 1)
       (age-but "10 to 15" 2)
       (age-but "16 to 35" 3)
       (age-but "36 to 50" 4)
       (age-but "Older than 50" 5))
     )
    c)))

(define (record-player c played-before)
  (server-call-mutate
   "player"
   (list
    (list "played_before" played-before)
    (list "age_range" (nightjar-player-age (game-data c))))
   (lambda (game data)
     (let ((id (car (JSON.parse data))))
       (nightjar-species-screen
        (game-modify-data
         (lambda (d)
           (nightjar-modify-player-id
            id (nightjar-modify-played-before played-before d)))
         game)))))
  c)

(define (nightjar-played-before-screen c)
  (game-modify-render
   (lambda (ctx)
     (draw-weed ctx c)
     (nightjar-all-text
      ctx
      (+ "Have you played this game before?"))
     (set! ctx.font "normal 30pt open-sans"))
   (game-modify-buttons
    (list

     (image-button
      "Yes"
      (+ default-button-x button-gap)
      default-button-y
      "rotate"
      (button-image)
      (lambda (c)
        (play-sound "button.wav")
        (record-player c #t)))

     (image-button
      "No"
      (- default-button-x button-gap)
      default-button-y
      "rotate"
      (button-image)
      (lambda (c)
        (play-sound "button.wav")
        (record-player #f)))) c)))


(define (nightjar-species-screen c)
  (game-modify-render
   (lambda (ctx)
     (draw-weed ctx c)
     (nightjar-all-text ctx "What predator species would you like to be?")
     (set! ctx.font "normal 30pt open-sans")
     (wrap-text ctx "They see the world differently..." 0 450 1000 75)
     )

   (game-modify-buttons
    (list

     (image-button
      "Goby"
      (- default-button-x button-gap)
      default-button-y
      "rotate"
      (find-image "goby.png")
      (lambda (c)
        (play-sound "button.wav")
        (nightjar-explain-screen
         (game-modify-data
          (lambda (d)
            (nightjar-modify-player-type "goby" d))
          c))))

     (image-button
      "Pollock"
      (+ default-button-x button-gap)
      default-button-y
      "rotate"
      (find-image "pollock.png")
      (lambda (c)
        (play-sound "button.wav")
        (nightjar-explain-screen
         (game-modify-data
          (lambda (d)
            (nightjar-modify-player-type "pollock" d))
          c))))
    ) c)))

(define (nightjar-species-other-screen c)
  (game-modify-render
   (lambda (ctx)
     (draw-weed ctx c)
     (nightjar-all-text ctx "Thank you! Choose your species to play again.")
     (set! ctx.font "normal 30pt open-sans")
     )

   (game-modify-buttons
    (list

     (image-button
      "Goby"
      (- default-button-x button-gap)
      (- default-button-y 100)
      "rotate"
      (find-image "goby.png")
      (lambda (c)
        (play-sound "button.wav")
        (nightjar-explain-screen
         (game-modify-data
          (lambda (d)
            (nightjar-modify-player-type "goby" d))
          c))))

     (image-button
      "Pollock"
      (+ default-button-x button-gap)
      (- default-button-y 100)
      "rotate"
      (find-image "pollock.png")
      (lambda (c)
        (play-sound "button.wav")
        (nightjar-explain-screen
         (game-modify-data
          (lambda (d)
            (nightjar-modify-player-type "pollock" d))
          c))))

     (image-button
      "Exit"
      (+ default-button-x button-gap)
      (+ default-button-y 100)
      "rotate"
      (button-image)
      (lambda (c)
        (play-sound "button.wav")
        (nightjar-intro c)))

     (image-button
      "High Scores"
      (- default-button-x button-gap)
      (+ default-button-y 100)
      "rotate"
      (button-image)
      (lambda (c)
        (play-sound "button.wav")
        (server-call-mutate
         "hiscores" ()
         (lambda (game data)
           (let ((hiscores (JSON.parse data)))
             (nightjar-hiscores hiscores #f game))))
        c))

     ) c)))


(define (get-n-items lst num)
  (cond
   ((null? lst) ())
   ((zero? num) ())
   (else (cons (car lst) (get-n-items (cdr lst) (- num 1))))))

(define (slice lst start count)
  (if (> start 1)
      (slice (cdr lst) (- start 1) count)
      (get-n-items lst count)))

(define (record-game c bg_location)
  (server-call-mutate
   "game"
   (list
    (list "player_id" (nightjar-player-id (game-data c)))
    (list "species" (nightjar-player-type (game-data c)))
    (list "bg_location" bg_location))
   (lambda (game data)
     (let ((id (car (JSON.parse data))))
       (nightjar-new-game-images
        (game-modify-data
         (lambda (d)
           (nightjar-modify-game-id
            id (nightjar-modify-level bg_location d)))
         game)))))
  c)

(define (nightjar-explain-screen c)
  (game-modify-render
   (lambda (ctx)
     (draw-weed ctx c)
     (ctx.drawImage (find-image "example-crab.jpg") 450 200)
     (set! ctx.font "normal 30pt open-sans")
     (wrap-text ctx "There is one crab hidden in every photo, touch it as soon as you see it" 0 100 1000 75)
     (wrap-text ctx "Where would you like to hunt?" 0 600 1000 75))
   (game-modify-buttons
    (list

     (image-button
      "Rock pool"
      (- default-button-x 400)
      (+ default-button-y 150)
      "rotate"
      (button-image)
      (lambda (c)
        (record-game c "rockpool")))

     (image-button
      "Mudflats"
      default-button-x
      (+ default-button-y 150)
      "rotate"
      (button-image)
      (lambda (c)
        (record-game c "mudflat")))

     (image-button
      "Mussel bed"
      (+ default-button-x 400)
      (+ default-button-y 150)
      "rotate"
      (button-image)
      (lambda (c)
        (record-game c "musselbed")))
     ) c)))

(define (prep-path p)
  (p.replace (js "new RegExp('/', 'g')") ":"))

(define (record-click c success)
  (let ((photoname (photo-filename (car (nightjar-images (game-data c)))))
        (crabname (photo-filename (car (nightjar-crabs (game-data c))))))
    (server-call
     "click"
     (list
      (list "game_id" (nightjar-game-id (game-data c)))
      (list "photo_name" (prep-path photoname))
      (list "crab_name" (prep-path crabname))
      (list "crab_x" (car (nightjar-crab-pos (game-data c))))
      (list "crab_y" (cadr (nightjar-crab-pos (game-data c))))
      (list "crab_rot" (nightjar-crab-rotation (game-data c)))
      (list "time_stamp" (- (game-time c) (nightjar-photo-time (game-data c))))
      (list "x_position" (game-mx c))
      (list "y_position" (game-my c))
      (list "success" success)))))

(define (record-crab-time c success_code)
  (let ((photoname (photo-filename (car (nightjar-images (game-data c)))))
        (crabname (photo-filename (car (nightjar-crabs (game-data c))))))
    (server-call
     "crab-time"
     (list
      (list "game_id" (nightjar-game-id (game-data c)))
      (list "photo_name" (prep-path photoname))
      (list "crab_name" (prep-path crabname))
      (list "time_stamp" (- (game-time c) (nightjar-photo-time (game-data c))))
      (list "success_code" success_code)))))

(define (draw-crab ctx crab-image crab-x crab-y crab-rot)
  (ctx.save)
  (ctx.translate crab-x crab-y)
  (ctx.translate (/ crab-image.width 2) (/ crab-image.height 2))
  (ctx.rotate crab-rot)
  (ctx.translate (- 0 (/ crab-image.width 2))
                 (- 0 (/ crab-image.height 2)))
  (ctx.drawImage crab-image 0 0)
  (ctx.restore))

(define (nightjar-game c)
  ;; todo: choose and delete

  (define example (car (nightjar-images (game-data c))))
  (define crab (car (nightjar-crabs (game-data c))))
  (define crab-image (find-image (photo-filename crab)))
  (define crab-x (- (car (nightjar-crab-pos (game-data c)))
                    (/ crab-image.width 2)))
  (define crab-y (- (cadr (nightjar-crab-pos (game-data c)))
                    (/ crab-image.height 2)))

  (game-modify-render
   (lambda (ctx)
     (ctx.drawImage
      (find-image (photo-filename example)) 0 0)

     (draw-crab
      ctx crab-image crab-x crab-y
      (nightjar-crab-rotation (game-data c)))

     (sprite-render
      ctx
      (game-time c)
      (nightjar-sprite (game-data c)))

     (nightjar-draw-clock
      ctx (/ (- (game-time c)
                (nightjar-start-time (game-data c)))
             1000) game-time-allowed))

   (game-modify-update
    (lambda (t c)
      (if (> (- (game-time c)
                (nightjar-start-time (game-data c)))
             (* game-time-allowed 1000))
          (begin
            (record-crab-time c 1)
            (nightjar-fail
             (photo-desc example)
             (string-append
              "Ran out of time finding this crab on "
              (photo-desc example)
              " - you'll go hungry tonight!") c))
          c))

    (game-modify-buttons
     (list

      (image-button
       "I give up"
       (- screen-width 100)
       (- screen-height 100)
       #f
       (find-image "quit.png")
       (lambda (c)
         (record-crab-time c 2)
         (nightjar-fail
          (photo-desc example)
          (string-append
           "You couldn't find this crab on "
           (photo-desc example)
           " - you'll go hungry tonight!")
          c)))

      ;; button over nightjar
      (rect-button
       "" crab-x crab-y crab-image.width crab-image.height #f
       (lambda (c)
         (play-sound "found.wav")
         (record-crab-time c 0)
         (nightjar-win
          (photo-desc example)
          (game-modify-data
           (lambda (d)
             (record-click c 1)
             (nightjar-modify-sprite
              (sprite (- (game-mx c) 126)
                      (- (game-my c) 105)
                      "right.png" (+ (game-time c) 2000))
              (nightjar-modify-score
               (- (game-time c) (nightjar-start-time d)) d)))
           c))))

      ;; big lose button over whole screen
      (rect-button
       ""
       0 0 screen-width screen-height #f
       (lambda (c)
         (play-sound "notfound.wav")
         (game-modify-data
          (lambda (d)
            (record-click c 0)
            (nightjar-modify-sprite
             (sprite (- (game-mx c) 126)
                     (- (game-my c) 105)
                     "wrong.png" (+ (game-time c) 2000)) d))
          c)))

      ) c))))

(define (nightjar-fail desc reason c)

  (define example (car (nightjar-images (game-data c))))
  (define crab (car (nightjar-crabs (game-data c))))
  (define crab-image (find-image (photo-filename crab)))
  (define crab-x (- (car (nightjar-crab-pos (game-data c)))
                    (/ crab-image.width 2)))
  (define crab-y (- (cadr (nightjar-crab-pos (game-data c)))
                    (/ crab-image.height 2)))

  (game-modify-render
   (lambda (ctx)
     (ctx.drawImage
      (find-image (photo-filename example))
      0 0)

     (draw-crab
      ctx crab-image crab-x crab-y
      (nightjar-crab-rotation (game-data c)))

     ;; highlight the crab
     (set! ctx.strokeStyle "#00ff00")
     (ctx.setLineDash (list 20 20))
     (set! ctx.lineWidth 10)
     (ctx.beginPath)
     (ctx.arc (car (nightjar-crab-pos (game-data c)))
              (cadr (nightjar-crab-pos (game-data c)))
              (/ crab-image.width 2) 0 (* Math.PI 2) true)
     (ctx.closePath)
     (ctx.stroke)
     (set! ctx.lineWidth 1)

     (sprite-render
      ctx
      (game-time c)
      (nightjar-sprite (game-data c)))

     (set! ctx.font "normal 30pt open-sans")
     (nightjar-all-text ctx reason)
     (set! ctx.font "normal 30pt open-sans"))

   (game-modify-update
    (lambda (t c) c)

    (game-modify-buttons
     (list

      (image-button
       "Next"
       (- default-button-x button-gap)
       (+ default-button-y 50) "rotate"
       (small-button-image)
       (lambda (c)
         (play-sound "button.wav")
         ;; check end of game
         (if (eq? (length (nightjar-images (game-data c))) 1)
             (nightjar-get-score c "Well done!")
             (nightjar-new-game-reset-timer c))))

      (image-button
       "Quit"
       (+ default-button-x button-gap)
       (+ default-button-y 50) "rotate"
       (small-button-image)
       (lambda (c)
         (play-sound "button.wav")
         ;; check end of game
         (nightjar-get-score c "Thank you for playing.")))


      ) c))))

(define (nightjar-win desc c)
  (define example (car (nightjar-images (game-data c))))
  (define crab (car (nightjar-crabs (game-data c))))
  (define crab-image (find-image (photo-filename crab)))
  (define crab-x (- (car (nightjar-crab-pos (game-data c)))
                    (/ crab-image.width 2)))
  (define crab-y (- (cadr (nightjar-crab-pos (game-data c)))
                    (/ crab-image.height 2)))

  (game-modify-render
   (lambda (ctx)
     (define example (car (nightjar-images (game-data c))))

     (ctx.drawImage
      (find-image (photo-filename example) image-lib)
      0 0)

     (draw-crab
      ctx crab-image crab-x crab-y
      (nightjar-crab-rotation (game-data c)))

     (sprite-render
      ctx
      (game-time c)
      (nightjar-sprite (game-data c)))

     (let ((done (+ (- 20 (length (nightjar-images (game-data c)))) 1)))
       (nightjar-all-text
        ctx (+ "You caught this crab on " desc " in "
               (/ (nightjar-score (game-data c)) 1000)
               " seconds. " (- 20 done) " left to go!")))
     (set! ctx.font "normal 30pt open-sans"))

   (game-modify-update
    (lambda (t c) c)

    (game-modify-buttons
     (list
      (image-button
       "Next crab"
       default-button-x
       (+ default-button-y 50) "rotate"
       (button-image)
       (lambda (c)
         (play-sound "button.wav")
         ;; check end of game
         (if (eq? (length (nightjar-images (game-data c))) 1)
             (nightjar-get-score c "Well done!")
             (nightjar-new-game-reset-timer c))))
      ) c))))

(define (nightjar-get-score c reason)
  (server-call-mutate
   "score"
   (list
    (list "game_id" (nightjar-game-id (game-data c))))
   (lambda (game data)
     (let ((score (JSON.parse data)))
       (nightjar-finish game
                        (list-ref score 0)
                        (list-ref score 1)
                        (list-ref score 2)
                        reason))))
  c)

(define (score-to-text score)
  (cond
   ((eq? score 1) "1st")
   ((eq? score 2) "2nd")
   ((eq? score 3) "3rd")
   (else (+ score "th"))))

(define (get-score-text score count)
  (if (> count 5)
      (+ " You made position " score)
      "Find more crabs to get a ranking."))

(define (trunc a)
  (/ (Math.floor (* a 100)) 100))

(define (nightjar-finish c av score count reason)
  (game-modify-render
   (lambda (ctx)
     (draw-weed ctx c)

     (nightjar-all-text
      ctx (+ reason " Your average crab spotting time is " (trunc (/ av 1000)) " seconds."))

     (wrap-text ctx (get-score-text score count) 0 430 1000 75))

   (game-modify-update
    (lambda (t c) c)

    (game-modify-buttons
     (list
      (if (and (eq? (nightjar-username (game-data c)) "???")
               (> count 5))
          (image-button
           "Enter Your Name"
           default-button-x
           (+ default-button-y 200)
           "rotate"
           (button-image)
           (lambda (c)
             (play-sound "button.wav")
             (nightjar-enter-name c)))

          (image-button
           "Back"
           default-button-x
           (+ default-button-y 200)
           "rotate"
           (button-image)
           (lambda (c)
             (play-sound "button.wav")
             (nightjar-species-other-screen c)))))
     c))))


(define (type-into str ch)
  (car
   (foldl
    (lambda (c r)
      (if (and (not (cadr r)) (eq? c "?"))
          (list (string-append (car r) ch) #t)
          (list (string-append (car r) c) (cadr r))))
    (list "" #f)
    (str.split ""))))

(define (type-into-delete str)
  (car (foldl
        (lambda (c r)
          ;;(console.log (list c r))
          (if (and (not (cadr r)) (not (eq? c "?")))
              (list (string-append "?" (car r)) #t)
              (list (string-append c (car r)) (cadr r))))
        (list "" #f)
        (reverse (str.split "")))))

(define (type-username ch c)
  (game-modify-data
   (lambda (d)
     (nightjar-modify-username (dbg (type-into (dbg (nightjar-username d)) ch)) d))
   c))

(define (type-delete c)
  (game-modify-data
   (lambda (d)
     (nightjar-modify-username (type-into-delete (nightjar-username d)) d))
   c))

(define (nightjar-enter-name c)
  (game-modify-update
   (lambda (t c) c)
   (game-modify-render
    (lambda (ctx)
      (draw-weed ctx c)
      (set! ctx.font "normal 30pt open-sans")
      (wrap-text ctx "Enter your name" 0 200 1000 70)
      (set! ctx.font "normal 50pt open-sans")
      (wrap-text ctx (nightjar-username (game-data c)) 0 280 1000 70)
      (set! ctx.font "normal 30pt open-sans"))

    (game-modify-buttons
     (append
      (index-map
       (lambda (i ch)
         (let ((x (+ 100 (* (modulo i 10) 180)))
               (y (+ 400 (* (Math.floor (/ i 10)) 130))))
           (image-button ch x y #f (small-button-image)
                         (lambda (c) (type-username ch c)))))
       (list "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M"
             "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"))

      (list
       (image-button "Delete" 1250 700 #t (small-button-image)
                     (lambda (c) (type-delete c)))

       (image-button "Done" 1500 700 "rotate" (small-button-image)
                     (lambda (c)
                       (server-call
                        "player-name"
                        (list
                         (list "player_id" (nightjar-player-id (game-data c)))
                         (list "player_name" (nightjar-username (game-data c)))))
                       (nightjar-species-other-screen c))))
      )
     c))))








(set! ctx.font "normal 75pt open-sans")
(centre-text ctx "Loading..." 240)

(load-sounds!
 (list
  "button.wav"
  "found.wav"
  "notfound.wav"
  ))


(load-images!
 (list "button-1.png"
       "button-2.png"
       "button-3.png"
       "button-s1.png"
       "quit.png"
       "right.png"
       "wrong.png"
       "foam.png"
       "sensory-ecology.png"
       "example-crab.jpg"
       "cutoutweed.png"
       "cutoutweed2.png"
       "cutoutweed3.png"
       "cutoutweed4.png"
       "cutoutweed5.png"
       "cutoutweed6.png"
       "cutoutweed7.png"
       "cutoutweed8.png"
       "goby.png"
       "pollock.png"
       )
 (lambda ()
   (start-game canvas ctx)))
