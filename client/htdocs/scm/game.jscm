;; -*- mode: scheme; -*-
; ------------------------------------------------
;; Copyright (C) 2016 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(load "scm/maths.jscm")
(load "scm/random.jscm")
(load "scm/nightjar.jscm")

(define game-time-allowed 10)
(define num-bgs-per-habitat 6)
(define num-examples (* num-bgs-per-habitat 3))
(define num-crabs-per-habitat (/ num-bgs-per-habitat 3))

(define empty-button-width 300)
(define empty-button-height 200)

(define rockpool-filenames
  (list
   "gylly/DSC_5837.jpg"
   "gylly/DSC_5844.jpg"
   "gylly/DSC_5850.jpg"
   "gylly/DSC_5860.jpg"
   "gylly/DSC_5864.jpg"
   "gylly/DSC_5907.jpg"
   "gylly/SAM_4382.jpg"
   "gylly/SAM_4700.jpg"
   "gylly/SAM_4724.jpg"
   "gylly/SAM_4775.jpg"
   "gylly/SAM_4787.jpg"
   "gylly/SAM_4907.jpg"
   "gylly/SAM_4946.jpg"
   "gylly/SAM_5100.jpg"
   "gylly/SAM_5112.jpg"
   "gylly/SAM_5124.jpg"
    ))

(define mudflat-filenames
   (list
    "penryn/DSC_5739.jpg"
    "penryn/DSC_5748.jpg"
    "penryn/DSC_5759.jpg"
    "penryn/DSC_5764.jpg"
    "penryn/DSC_5769.jpg"
    "penryn/DSC_5773.jpg"
    "penryn/DSC_5778.jpg"
    "penryn/DSC_5784.jpg"
    "penryn/DSC_5788.jpg"
    "penryn/DSC_5805.jpg"
    "penryn/SAM_5340.jpg"
    "penryn/SAM_5352.jpg"
    "penryn/SAM_5388.jpg"
    "penryn/SAM_5400.jpg"
    "penryn/SAM_5412.jpg"
    "penryn/SAM_5427.jpg"
    "penryn/SAM_5439.jpg"
    "penryn/SAM_5463.jpg"
    "penryn/SAM_5487.jpg"
    "penryn/SAM_5532.jpg"
    ))

(define musselbed-filenames
   (list
   "gylly/DSC_5837.jpg"
   "gylly/DSC_5844.jpg"
   "gylly/DSC_5850.jpg"
   "gylly/DSC_5860.jpg"
   "gylly/DSC_5864.jpg"
   "gylly/DSC_5907.jpg"
   "gylly/SAM_4382.jpg"
   "gylly/SAM_4700.jpg"
   "gylly/SAM_4724.jpg"
   "gylly/SAM_4775.jpg"
   "gylly/SAM_4787.jpg"
   "gylly/SAM_4907.jpg"
   "gylly/SAM_4946.jpg"
   "gylly/SAM_5100.jpg"
   "gylly/SAM_5112.jpg"
   "gylly/SAM_5124.jpg"
    ))


(define rockpool-crab-filenames
(list
  "283_A_Vis_Falmouth_2014.mspec_c1.png"
"284_J_Vis_Falmouth_2014.mspec_c1.png"
"287_A_Vis_Falmouth_2014.mspec_c1.png"
"288_J_Vis_Falmouth_2014.mspec_c1.png"
"289_J_Vis_Falmouth_2014.mspec_c1.png"
"291_J_Vis_Falmouth_2014.mspec_c1.png"
"292_A_Vis_Falmouth_2014.mspec_c1.png"
"293_A_Vis_Falmouth_2014.mspec_c1.png"
"295_J_Vis_Falmouth_2014.mspec_c1.png"
"299_A_Vis_Falmouth_2014.mspec_c1.png"
"301_J_Vis_Falmouth_2014.mspec_c1.png"
"302_J_Vis_Falmouth_2014.mspec_c1.png"
"303_J_Vis_Falmouth_2014.mspec_c1.png"
"304_J_Vis_Falmouth_2014.mspec_c1.png"
"506_A_Vis_Falmouth_2014.mspec_c1.png"
"507_A_Vis_Falmouth_2014.mspec_c1.png"
"508_J_Vis_Falmouth_2014.mspec_c1.png"
"509_A_Vis_Falmouth_2014.mspec_c1.png"
"510_J_Vis_Falmouth_2014.mspec_c1.png"
"511_J_Vis_Falmouth_2014.mspec_c1.png"
"512_J_Vis_Falmouth_2014.mspec_c1.png"
"513_J_Vis_Falmouth_2014.mspec_c1.png"
"514_J_Vis_Falmouth_2014.mspec_c1.png"
"515_A_Vis_Falmouth_2014.mspec_c1.png"
"516_J_Vis_Falmouth_2014.mspec_c1.png"
"518_A_Vis_Falmouth_2014.mspec_c1.png"
"520_A_Vis_Falmouth_2014.mspec_c1.png"
"521_A_Vis_Falmouth_2014.mspec_c1.png"
"522_A_Vis_Falmouth_2014.mspec_c1.png"
"525_A_Vis_Falmouth_2014.mspec_c1.png"
"526_J_Vis_Falmouth_2014.mspec_c1.png"
"527_A_Vis_Falmouth_2014.mspec_c1.png"
"530_J_Vis_Falmouth_2014.mspec_c1.png"
"531_J_Vis_Falmouth_2014.mspec_c1.png"
"532_J_Vis_Falmouth_2014.mspec_c1.png"
"533_A_Vis_Falmouth_2014.mspec_c1.png"
"534_J_Vis_Falmouth_2014.mspec_c1.png"
"536_A_Vis_Falmouth_2014.mspec_c1.png"
"538_J_Vis_Falmouth_2014.mspec_c1.png"
"61_A_Vis_Falmouth_2014.mspec_c1.png"
"62_A_Vis_Falmouth_2014.mspec_c1.png"
"63_A_Vis_Falmouth_2014.mspec_c1.png"
"64_A_Vis_Falmouth_2014.mspec_c1.png"
"66_A_Vis_Falmouth_2014.mspec_c1.png"
"68_J_Vis_Falmouth_2014.mspec_c1.png"
"70_A_Vis_Falmouth_2014.mspec_c1.png"
"71_J_Vis_Falmouth_2014.mspec_c1.png"
"73_J_Vis_Falmouth_2014.mspec_c1.png"
"77_A_Vis_Falmouth_2014.mspec_c1.png"
"78_A_Vis_Falmouth_2014.mspec_c1.png"))



(define mudflat-crab-filenames
  (build-list
   28 (lambda (i)
        (string-append "autocrab-" i ".png"))))

(define musselbed-crab-filenames
  (build-list
   28 (lambda (i)
        (string-append "autocrab-" i ".png"))))

(define (filename-to-type fn)
  (let ((a (fn.substring 0 2)))
    (cond
     ((eq? a "pe") "the Penryn river")
     ((eq? a "gy") "Gyllyngvase beach")
     (else
      "unknown beach"))))

(define photos
  (list
   (list
    (map (lambda (f) (list (string-append "photos/rockpool/" f) (filename-to-type f) "rockpool"
                           (string-append "photos/rockpool/map-" f)
                           )) rockpool-filenames)
    (map (lambda (f) (list (string-append "photos/rockpool/di-" f) (filename-to-type f) "rockpool"
                           (string-append "photos/rockpool/map-" f)
                           )) rockpool-filenames))
   (list
    (map (lambda (f) (list (string-append "photos/mudflat/" f) (filename-to-type f) "mudflat"
                           (string-append "photos/mudflat/map-" f)
                           )) mudflat-filenames)
    (map (lambda (f) (list (string-append "photos/mudflat/di-" f) (filename-to-type f) "mudflat"
                           (string-append "photos/mudflat/map-" f)
                           )) mudflat-filenames))
   (list
    (map (lambda (f) (list (string-append "photos/musselbed/" f) (filename-to-type f) "musselbed"
                           (string-append "photos/musselbed/map-" f)
                           )) musselbed-filenames)
    (map (lambda (f) (list (string-append "photos/musselbed/di-" f) (filename-to-type f) "musselbed"
                           (string-append "photos/musselbed/map-" f)
                           )) musselbed-filenames))
   (list
    (map (lambda (f) (list (string-append "photos/rockpool/crabs/" f) (filename-to-type f) "rockpool" "no map for crab")) rockpool-crab-filenames)
    (map (lambda (f) (list (string-append "photos/rockpool/di-crabs/" f) (filename-to-type f) "rockpool" "no map for crab")) rockpool-crab-filenames))
   (list
    (map (lambda (f) (list (string-append "photos/rockpool/crabs/" f) (filename-to-type f) "rockpool" "no map for crab")) rockpool-crab-filenames)
    (map (lambda (f) (list (string-append "photos/rockpool/di-crabs/" f) (filename-to-type f) "rockpool" "no map for crab")) rockpool-crab-filenames))
   (list
    (map (lambda (f) (list (string-append "photos/rockpool/crabs/" f) (filename-to-type f) "rockpool" "no map for crab")) rockpool-crab-filenames)
    (map (lambda (f) (list (string-append "photos/rockpool/di-crabs/" f) (filename-to-type f) "rockpool" "no map for crab")) rockpool-crab-filenames))
   ))

;;(map (lambda (f) (list (string-append "photos/mudflat/crabs/" f) (filename-to-type f) "mudflat" "no map for crab")) mudflat-crab-filenames)
;;(map (lambda (f) (list (string-append "photos/mudflat/di-crabs/" f) (filename-to-type f) "mudflat" "no map for crab")) mudflat-crab-filenames))

;;(map (lambda (f) (list (string-append "photos/musselbed/crabs/" f) (filename-to-type f) "musselbed" "no map for crab")) musselbed-crab-filenames)
;;(map (lambda (f) (list (string-append "photos/musselbed/di-crabs/" f) (filename-to-type f) "musselbed" "no map for crab")) musselbed-crab-filenames))

(define (photo-filename l) (list-ref l 0))
(define (photo-desc l) (list-ref l 1))
(define (photo-habitat l) (list-ref l 2))
(define (photo-map l) (list-ref l 3))

(define (rockpool-photos l) (list-ref l 0))
(define (mudflat-photos l) (list-ref l 1))
(define (musselbed-photos l) (list-ref l 2))
(define (rockpool-crab-photos l) (list-ref l 3))
(define (mudflat-crab-photos l) (list-ref l 4))
(define (musselbed-crab-photos l) (list-ref l 5))

(define (button-image)
  (find-image (choose (list "button-1.png" "button-2.png" "button-3.png"))))

(define (small-button-image)
  (find-image (choose (list "button-s1.png"))))


;; get from image structure
(define image-width (* screen-width 1))
(define image-height (* screen-height 1))
(define image-centre-x (/ image-width 2))
(define image-centre-y (/ image-height 2))

(define safe-x 0.2)
(define safe-y 0.2)
(define safe-x-px (* safe-x image-width))
(define safe-y-px (* safe-y image-height))

;; (define (generate-image-pos)
;;   (list (- (* screen-width (+ safe-x (* (rndf) (- 1 (* safe-x 2))))) image-centre-x)
;;         (- (* screen-height (+ safe-y (* (rndf) (- 1 (* safe-y 2))))) image-centre-y)))

(define (generate-screen-pos)
  (list (+ safe-x-px
           (* (rndf) (- image-width (* safe-x-px 2))))
        (+ safe-y-px
           (* (rndf) (- image-height (* safe-y-px 2))))))

(define (pos-to-image-index pos img)
  (let ((x (Math.floor (* (/ (vx pos) image-width) img.width)))
        (y (Math.floor (* (/ (vy pos) image-height) img.height))))
    (* (+ (* y img.width) x) 4))) ;; rbga

(define (get-pixel-val pos imagedata img)
  (let ((index (pos-to-image-index pos img)))
    (list-ref imagedata.data index)))

(define (generate-crab-pos c)
  (let ((example (car (nightjar-images (game-data c))))
        (pos (generate-screen-pos))
        (canvas (document.createElement "canvas")))
    (let ((context (canvas.getContext "2d"))
          (ex-map (find-image (photo-map example))))
      ;; maybe the map doesn't exist for all backgrounds...
      (when ex-map
            (context.drawImage ex-map 0 0)
            (let ((imagedata (context.getImageData 0 0 ex-map.width ex-map.height))
                  ;; use a safety counter in case of entirely black images!
                  (safe 0))
              (while (and (< safe 500)
                          (< (get-pixel-val pos imagedata ex-map) 127))
                     (set! safe (+ safe 1))
                     (set! pos (generate-screen-pos))))))
    pos))

(define default-button-x (- (/ screen-width 2) 0))
(define default-button-y (+ (/ screen-height 2) 200))
(define button-gap 250)

(define (build-bubble id vel fuzz age)
  (list id vel fuzz age))

(define (bubble-id b) (list-ref b 0))
(define (bubble-modify-id v b) (list-replace b 0 v))
(define (bubble-vel b) (list-ref b 1))
(define (bubble-modify-vel v b) (list-replace b 1 v))
(define (bubble-fuzz b) (list-ref b 2))
(define (bubble-age b) (list-ref b 3))
(define (bubble-modify-age v b) (list-replace b 3 v))

(define bubble-pos (list (list 100 100) (list 200 200)))

(define (update-bubble-pos c)
  (set! bubble-pos
        (foldl
         (lambda (b r)
           (if (not (button-drawable b))
               (append
                r (list (list (+ 20 (button-x b) (* (/ (button-w b) 2) 0.6))
                              (+ 10 (button-y b) (* (/ (button-h b) 2) 0.6)))))
               r))
         ()
         (game-buttons c)))
  ;; num bubbles same for num buttons
  (update-bubbles-size! (* (length bubble-pos) 40))
  c)

(define (bubbles-hit! id c)
  (particle-system-user-update!
   (lambda (bubble)
     (if (eq? (bubble-id bubble) id)
         (bubble-modify-vel (v2mul (list (* (crndf) 0.5) (- 0 (rndf))) 5) bubble)
         (bubble-modify-vel (list 1000 1000) bubble)))
   (nightjar-bubbles (game-data c))))

(define bubble-max-opacity 0.5)

(define (bubbles-reset bubbles)
  (particle-system-init
   (lambda (i)
     (list
      (list 9999 9999) ;; pos
      (list 0 0)
      bubble-max-opacity
      (build-bubble
         i (vec2 0 (* (- 0 (rndf)) 0.5)) ;; vel
         (rndf) ;; fuzz
         (* 200 (rndf))) ;; age
      ))
   bubbles))

(define (build-bubbles)
  (particle-system-modify-update-hook
   (lambda (pos scale trans bubble)
     (if (> (bubble-age bubble) 200)
         (if (null? bubble-pos)
             (list
              (list 9999 9999)
              (list 0 0) 1 (bubble-modify-age 0 bubble))
             (let ((id (random (length bubble-pos))))
               (list
                (v2add
                 (list-ref bubble-pos id)
                 (v2mul2 (rndcirc2d) (vec2 120 80)))
                (list 0 0) bubble-max-opacity
                (bubble-modify-id
                 id (bubble-modify-age
                     0 (bubble-modify-vel
                        (vec2 0 (- 0 (* (rndf) 0.5)))
                        bubble))))))
         (list
          (list (+ (vx pos) (vx (bubble-vel bubble)))
                (+ (vy pos) (vy (bubble-vel bubble))))
          (list
           (min 0.5 (/ (bubble-age bubble) 50))
           (min 0.5 (/ (bubble-age bubble) 50)))
          (max 0 (* (/ (- 200 (bubble-age bubble)) 200) bubble-max-opacity))
          (bubble-modify-age (+ (bubble-age bubble) 1) bubble))))
   (particle-system-init
    (lambda (i)
      (list
       (list 9999 9999) ;; pos
       (list 0 0)
       bubble-max-opacity (build-bubble
          i (vec2 0 (* (- 0 (rndf)) 0.5)) ;; vel
          (rndf) ;; fuzz
          (* 200 (rndf))) ;; age
       ))
    (build-particle-system
     100 (list
          (find-image "bubble-1.png")
          (find-image "bubble-2.png")
          (find-image "bubble-3.png")
          (find-image "bubble-4.png")
          (find-image "bubble-5.png")
          (find-image "bubble-6.png")
          )))))

(define bubbles ())

(define (update-bubbles-size! s)
  (set! bubbles (particle-system-modify-size s bubbles)))


(define (empty-nightjar-data)
  (list 0 0 0 "" #f 0 () () 0 (sprite 0 0 "wrong.png" 0) 0 "???" () 0 0
        bubbles 0))

(define (nightjar-start-time g) (list-ref g 0))
(define (nightjar-modify-start-time v g) (list-replace g 0 v))
(define (nightjar-photo-time g) (list-ref g 1))
(define (nightjar-modify-photo-time v g) (list-replace g 1 v))
(define (nightjar-player-id g) (list-ref g 2))
(define (nightjar-modify-player-id v g) (list-replace g 2 v))
(define (nightjar-player-type g) (list-ref g 3))
(define (nightjar-modify-player-type v g) (list-replace g 3 v))
(define (nightjar-played-before g) (list-ref g 4))
(define (nightjar-modify-played-before v g) (list-replace g 4 v))
(define (nightjar-player-age g) (list-ref g 5))
(define (nightjar-modify-player-age v g) (list-replace g 5 v))
(define (nightjar-images g) (list-ref g 6))
(define (nightjar-modify-images v g) (list-replace g 6 v))
(define (nightjar-crab-pos g) (list-ref g 7))
(define (nightjar-modify-crab-pos v g) (list-replace g 7 v))
(define (nightjar-score g) (list-ref g 8))
(define (nightjar-modify-score v g) (list-replace g 8 v))
(define (nightjar-sprite g) (list-ref g 9))
(define (nightjar-modify-sprite v g) (list-replace g 9 v))
(define (nightjar-level g) (list-ref g 10))
(define (nightjar-modify-level v g) (list-replace g 10 v))
(define (nightjar-username g) (list-ref g 11))
(define (nightjar-modify-username v g) (list-replace g 11 v))
(define (nightjar-crabs g) (list-ref g 12))
(define (nightjar-modify-crabs v g) (list-replace g 12 v))
(define (nightjar-crab-rotation g) (list-ref g 13))
(define (nightjar-modify-crab-rotation v g) (list-replace g 13 v))
(define (nightjar-game-id g) (list-ref g 14))
(define (nightjar-modify-game-id v g) (list-replace g 14 v))
(define (nightjar-bubbles g) (list-ref g 15))
(define (nightjar-results-num g) (list-ref g 16))
(define (nightjar-modify-results-num v g) (list-replace g 16 v))

(define (time-left c)
  (* (- (game-time c)
        (nightjar-start-time (game-data c)))
     0.001))

;; setup new game
(define (nightjar-new-game c)
  (nightjar-game
   (game-modify-data
    (lambda (d)
      (nightjar-modify-start-time
       (game-time c)
       (nightjar-modify-crab-rotation
        (* 2 (rndf) 3.141) ; good enuf
        (nightjar-modify-crab-pos
         (generate-crab-pos c)
         (nightjar-modify-sprite
          (sprite -999 -999 "right.png" 0)
          d)))))
    c)))

;; load images and reset (calling new-game above)
(define (nightjar-new-game-reset-timer c)
  (set! bubble-pos ())
  ;; start image load
  (load-images-mutate
   (lambda (c)
     (msg "new-game-reset-timer")
     (nightjar-new-game
      (game-modify-data
       (lambda (d)
         ;; now loaded - remove previous images and set photo time
         (nightjar-modify-images
          (cdr (nightjar-images d))
          (nightjar-modify-crabs
           (cdr (nightjar-crabs d))
           (nightjar-modify-photo-time
            (game-time c) d))))
       c)))
   (list
    ;; load the *next* images
    (photo-filename (list-ref (nightjar-images (game-data c)) 1))
    (photo-map (list-ref (nightjar-images (game-data c)) 1))
    (photo-filename (list-ref (nightjar-crabs (game-data c)) 1))))
  ;; set up loading screen before loading
  (game-modify-buttons
   ()
   (game-modify-render
    (lambda (ctx)
      (let ((example (car (nightjar-images (game-data c)))))
        (ctx.drawImage
         (find-image (photo-filename example))
         0 0)
        (particle-system-render ctx (nightjar-bubbles (game-data c)))
        (nightjar-all-text ctx "Loading your next crab...")))
    c)))


(define (get-crabs-for-a-habitat tri)
  (shuffle
   (append
    (crop (shuffle (list-ref (rockpool-crab-photos photos) tri)) num-crabs-per-habitat)
    (crop (shuffle (list-ref (mudflat-crab-photos photos) tri)) num-crabs-per-habitat)
    (crop (shuffle (list-ref (musselbed-crab-photos photos) tri)) num-crabs-per-habitat))))

(define (habitat-photos tri habitat-list)
  (map2
   (lambda (a b)
     (list a b))
   (crop (shuffle (list-ref habitat-list tri)) num-bgs-per-habitat)
   (get-crabs-for-a-habitat tri)))

(define (get-image-pairs tri)
  (shuffle
   (append
    (habitat-photos tri (rockpool-photos photos))
    (habitat-photos tri (mudflat-photos photos))
    (habitat-photos tri (musselbed-photos photos)))))

(define (unzip l n)
  (map (lambda (i) (list-ref i n)) l))

(define (nightjar-new-game-images c)
  (let ((tri (if (eq? (nightjar-player-type (game-data c)) "human") 0 1)))
    (play-sound "button.wav")
    (let ((image-pairs (get-image-pairs tri)))
      (load-images-mutate
       (lambda (c)
         (nightjar-new-game
          (game-modify-data
           (lambda (d)
             (nightjar-modify-photo-time
              (game-time c)
              (nightjar-modify-images
               (unzip image-pairs 0)
               (nightjar-modify-crabs
                (unzip image-pairs 1) d))))
           c)))
       (list
        (photo-filename (list-ref (car image-pairs) 0))
        (photo-map (list-ref (car image-pairs) 0))
        (photo-filename (list-ref (car image-pairs) 1))))
      (game-modify-buttons
       ()
       (game-modify-render
        (lambda (ctx)
          (nightjar-all-text ctx "Loading your first crab..."))
        c)))))

(set! randseed (choose (list 7.21 1)))

(define (seeded-choose l)
  (list-ref l (Math.floor (* (seeded-random) (length l)))))

(define (random-weed)
  (seeded-choose
   (list
    "cutoutweed.png"
    "cutoutweed2.png"
    "cutoutweed3.png"
    "cutoutweed4.png"
    "cutoutweed5.png"
    "cutoutweed6.png"
    "cutoutweed7.png"
    "cutoutweed8.png"
    )))


(define pos-list
  (build-list
   25 (lambda (i)
        (list (* (seeded-random) screen-width)
              (* (rndf) screen-height)
              (seeded-random)
              (random-weed)))))


(define (draw-weed ctx c)
  (ctx.save)
  (set! ctx.globalAlpha 0.3)
  (for-each
   (lambda (pos)
     (let ((img (find-image (list-ref pos 3))))
       (ctx.save)
       (ctx.translate (car pos) (+ screen-height 100))
;;       (ctx.translate (/ img.width 2) img.height)
       (ctx.scale
        (+ (list-ref pos 2) 0.5)
        (+ (list-ref pos 2) 0.5))

       (ctx.rotate (* 0.02 (sin (+ (* (list-ref pos 2) 5)
                                   (* 0.001 (game-time c))))))
;;       (ctx.translate (- 0 (/ img.width 2)) (- 0 img.height))
       (ctx.drawImage img (/ -img.width 2) -img.height)
       (ctx.restore)))
   pos-list)
  (ctx.restore))

;;(list-ref (cadr e) 0)

(define (render-results-1 ctx data yp)
  (let ((xpos 530) (ypos yp)
        (bar-start (+ yp 450))
        (maxtime (Math.max
                  (cadr (cadr (list-ref (car data) 0)))
                  (cadr (cadr (list-ref (car data) 1)))
                  (cadr (cadr (list-ref (car data) 2))))))

    (centre-text2 ctx "Best crabs per habitat" (+ xpos 260) (- ypos 20))
    (set! ctx.font "normal 20pt open-sans")
    (wrap-text ctx "There are crabs from rockpools, mudflats and musselbeds, which is hardest to spot in each habitat?" 0 (+ ypos 15) 750 25)
    (set! ypos (+ ypos 100))
    (set! ctx.font "normal 25pt open-sans")

    (ctx.save)
    (ctx.translate 460 (+ yp 280))
    (ctx.rotate (/ -3.141 2))
    (centre-text2 ctx "Average time" 0 0)
    (centre-text2 ctx "to find crab" 0 35)
    (ctx.restore)

    (index-for-each
     (lambda (i e)
       (let ((habitat (car e))
             (crab-type (list-ref (cadr e) 0))
             (time (list-ref (cadr e) 1)))

         (let ((crab-name (cond
                           ((eq? crab-type "rockpool") "Rockpool crabs")
                           ((eq? crab-type "musselbed") "Musselbed crabs")
                           (else "Mudflat crabs"))))

           (set! ctx.fillStyle "#039a8b")
           (let ((height (* (/ time maxtime) 280)))
             (roundRect ctx (+ xpos (* i 200)) (- bar-start height)
                        150 height 10 #t #f)
             (set! ctx.fillStyle "#fff")

             (centre-text2
              ctx
              (cond
               ((eq? habitat "rockpool") "Rockpool")
               ((eq? habitat "musselbed") "Musselbed")
               (else "Mudflat"))
              (+ xpos (+ 75 (* i 200)))
              (+ ypos 390))

             (centre-text2
              ctx "habitat"
              (+ xpos (+ 75 (* i 200)))
              (+ ypos 425))

             (set! ctx.font "normal 20pt open-sans")
             (centre-text2 ctx (time-to-seconds time)
                           (+ xpos (+ 75 (* i 200)))
                           (- bar-start 20 (/ height 2)))
             (centre-text2 ctx "Seconds"
                           (+ xpos (+ 75 (* i 200)))
                           (- (+ bar-start 20) (/ height 2)))

             (ctx.drawImage (find-image (+ crab-type "-crab.png"))
                            (+ 10 xpos (* i 200))
                            (- bar-start height 130))
             (set! ctx.font "normal 16pt open-sans")
             (centre-text2 ctx crab-name
                           (+ xpos (+ 75 (* i 200)))
                           (- bar-start height 10))
             (set! ctx.font "normal 25pt open-sans")

             ))))
     (list-ref data 0)))
  (set! ctx.font "normal 30pt open-sans")
  )

(define (render-results-2 ctx data yp)
  (let ((xpos 530) (ypos yp)
        (bar-start (+ yp 450))
        (maxtime (cadr (list-ref (list-ref data 1) 2))))
    (centre-text2 ctx "Best habitat for hiding in" (+ xpos 250) (- ypos 20))
    (set! ctx.font "normal 20pt open-sans")
    (centre-text2 ctx "Are crabs harder to find in certain habitats?" (+ xpos 270) (+ ypos 15))
    (set! ypos (+ ypos 100))
    (set! ctx.font "normal 25pt open-sans")

    (ctx.save)
    (ctx.translate 460 (+ yp 280))
    (ctx.rotate (/ -3.141 2))
    (centre-text2 ctx "Average time" 0 0)
    (centre-text2 ctx "to find crab" 0 35)
    (ctx.restore)

    (index-for-each
     (lambda (i ee)
       (let ((habitat (car ee))
             (time (cadr ee)))

         (set! ctx.fillStyle "#039a8b")
         (let ((height (* (/ time maxtime) 400)))
           (roundRect ctx (+ xpos (* i 200)) (- bar-start height)
                      150 height 10 #t #f)
         (set! ctx.fillStyle "#fff")

         (centre-text2
          ctx
          (cond
           ((eq? habitat "rockpool") "Rockpool")
           ((eq? habitat "musselbed") "Musselbed")
           (else "Mudflat"))
          (+ xpos (+ 75 (* i 200)))
          (+ ypos 390))

         (set! ctx.font "normal 20pt open-sans")
         (centre-text2 ctx (time-to-seconds time)
                       (+ xpos (+ 75 (* i 200)))
                       (- bar-start 20 (/ height 2)))
         (centre-text2 ctx "Seconds"
                       (+ xpos (+ 75 (* i 200)))
                       (- (+ bar-start 20) (/ height 2)))
         (set! ctx.font "normal 25pt open-sans")
         )))
     (list-ref data 1))
    (set! ctx.font "normal 30pt open-sans")
    ))

(define (render-results-3 ctx data yp)
  (let ((xpos 530) (ypos yp)
        (bar-start (+ yp 450))
        (maxtime (cadr (list-ref (list-ref data 2) 1))))
    (centre-text2 ctx "Best predator vision" (+ xpos 270) (- ypos 20))
    (set! ctx.font "normal 20pt open-sans")
    (centre-text2 ctx "Which predator is fastest at finding crabs?" (+ xpos 270) (+ ypos 15))
    (set! ctx.font "normal 25pt open-sans")
    (set! ypos (+ ypos 100))

    (ctx.save)
    (ctx.translate 460 (+ yp 280))
    (ctx.rotate (/ -3.141 2))
    (centre-text2 ctx "Average time" 0 0)
    (centre-text2 ctx "to find crab" 0 35)
    (ctx.restore)

    (index-for-each
     (lambda (i ee)
       (let ((predator (car ee))
             (time (cadr ee)))

         (set! ctx.fillStyle "#039a8b")
         (let ((height (* (/ time maxtime) 400)))
           (roundRect ctx (+ xpos (* i 300)) (- bar-start height)
                      250 height 10 #t #f)
         (set! ctx.fillStyle "#fff")

         (centre-text2
          ctx
          (cond
           ((eq? predator "human") "Human")
           (else "Pollock"))
          (+ xpos (+ 125 (* i 300)))
          (+ ypos 390))

         (set! ctx.font "normal 16pt open-sans")
         (wrap-text
          ctx
          (cond
           ((eq? predator "human") "Trichromatic - seeing red, green and blue")
           (else "Dichromatic - seeing yellow and blue"))
          (- (+ xpos (+ 125 (* i 300)))  (/ screen-width 2))
          (+ ypos 415)
          300 22)
         (set! ctx.font "normal 30pt open-sans")

         (centre-text2 ctx (time-to-seconds time)
                       (+ xpos (+ 125 (* i 300)))
                       (- bar-start 20 (/ height 2)))
         (centre-text2 ctx "Seconds"
                       (+ xpos (+ 125 (* i 300)))
                       (- (+ bar-start 20) (/ height 2)))
         )))
     (list-ref data 2))
    (set! ctx.font "normal 30pt open-sans")
    ))

(define (nightjar-intro c)
    (game-modify-timeout
     (lambda ()
       (set! window.location "/"))
    (update-bubble-pos
     (game-modify-data
      (lambda (d)
        (empty-nightjar-data))
      (game-modify-render
       (lambda (ctx)
         (draw-weed ctx c)
         (particle-system-render ctx (nightjar-bubbles (game-data c)))
         (ctx.drawImage (find-image "crab1.png") 0 555)
         (ctx.drawImage (find-image "crab2.png") 1240 550)
         (nightjar-heading ctx "Citizen Science Experiment")
         (set! ctx.font "normal 25pt open-sans")
         (wrap-text ctx "Can you spot the shore crabs in their different habitats?" 0 400 1000 50)
         (wrap-text ctx "Play this game to help scientists research the success of shore crab camouflage" 0 480 1000 50)
         (set! ctx.font "normal 30pt open-sans")
         (set! ctx.font "normal 30pt open-sans"))

       (game-modify-buttons
        (list

         (empty-image-button
          "Start"
          (- default-button-x 200)
          default-button-y
          empty-button-width empty-button-height
          "none"
          (lambda (c)
            (bubbles-hit! 0 c)
            (play-sound "button.wav")
            (nightjar-experiment-screen c)))

         (empty-image-button
          "Results"
          (+ default-button-x 200)
          default-button-y
          empty-button-width empty-button-height
          "none"
          (lambda (c)
            (bubbles-hit! 1 c)
            (play-sound "button.wav")
            (server-call-mutate
             "stats" ()
             (lambda (game data)
               (play-sound "button.wav")
               (nightjar-results game (JSON.parse data))
               ))
            c))

         )
        c))))))

(define (nightjar-about c)
  (update-bubble-pos
   (game-modify-render
    (lambda (ctx)
      (draw-weed ctx c)
      (particle-system-render ctx (nightjar-bubbles (game-data c)))
      (nightjar-heading ctx "About")
      (set! ctx.font "normal 25pt open-sans")
      (wrap-text ctx "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages." 0 300 1000 50)
      (set! ctx.font "normal 30pt open-sans"))

    (game-modify-buttons
     (list
      (empty-image-button
       "Back" 1400
       default-button-y empty-button-width empty-button-height "none"
       (lambda (c)
         (bubbles-hit! 0 c)
         (nightjar-intro game))
       c)

      (empty-image-button
       "Play!"
       default-button-x
       default-button-y
       empty-button-width empty-button-height
       "none"
       (lambda (c)
         (bubbles-hit! 1 c)
         (play-sound "button.wav")
         (nightjar-experiment-screen c)))

      (empty-image-button
       "Results" 180 default-button-y
       empty-button-width empty-button-height "none"
       (lambda (c)
         (bubbles-hit! 0 c)
         (server-call-mutate
          "stats" ()
          (lambda (game data)
            (play-sound "button.wav")
            (nightjar-results game (JSON.parse data))
            ))
         c))
      )
     c))))


(define (time-to-seconds t)
  (/ (Math.floor (/ t 10)) 100))

(define (nightjar-hiscores table ret-to-intro c)
  (update-bubble-pos
   (game-modify-update
   (lambda (t c) c)
   (game-modify-render
    (lambda (ctx)
      (draw-weed ctx c)
      (particle-system-render ctx (nightjar-bubbles (game-data c)))
      (set! ctx.font "normal 50pt open-sans")
      (wrap-text ctx (string-append "Hall of fame") 0 100 1000 70)
      (set! ctx.font "normal 30pt open-sans")

      (wrap-text ctx "Human" -200 180)
      (wrap-text ctx "Pollock" 200 180)

      (when (list-ref table 0)
            (index-for-each
             (lambda (i e)
               (let ((txt (string-append (car e) " : " (time-to-seconds (cadr e)))))
                 (wrap-text ctx txt -200 (+ 240 (* 40 i)))))
             (list-ref table 0)))

      (when (list-ref table 1)
            (index-for-each
             (lambda (i e)
               (let ((txt (string-append (car e) " : " (time-to-seconds (cadr e)))))
                 (wrap-text ctx txt 200 (+ 240 (* 40 i)))))
             (list-ref table 1)))
      )
    (game-modify-buttons
     (list
      (empty-image-button
       "Back" 1300 720 empty-button-width empty-button-height "none"
       (lambda (c)
         (bubbles-hit! 0 c)
         (play-sound "button.wav")
         (if ret-to-intro
             (nightjar-intro c)
             (begin
               (server-call-mutate
                "stats" ()
                (lambda (game data)
                  (play-sound "button.wav")
                  (nightjar-main-screen game (JSON.parse data))))
               c)))))
     c)))))


(define (nightjar-experiment-screen c)
  (update-bubble-pos
  (game-modify-render
   (lambda (ctx)
     (draw-weed ctx c)
     (particle-system-render ctx (nightjar-bubbles (game-data c)))
     (set! ctx.font "normal 50pt open-sans")
     (wrap-text ctx "We would like to use results from your game for a scientific publication, is that ok?" 0 200 1200 75)
     (set! ctx.font "normal 30pt open-sans")
     (wrap-text ctx "We are using age and timing information" 0 500 1000 75))

   (game-modify-buttons
    (list

     (empty-image-button
      "Yes that's fine"
      (+ default-button-x button-gap)
      default-button-y
      empty-button-width empty-button-height
      "none"
      (lambda (c)
        (bubbles-hit! 0 c)
        (play-sound "button.wav")
        (nightjar-age-screen c)))

     (empty-image-button
      "Back"
      (- default-button-x button-gap)
      default-button-y
      empty-button-width empty-button-height
      "none"
      (lambda (c)
        (bubbles-hit! 1 c)
        (play-sound "button.wav")
        (nightjar-intro c))))
    c))))

(define (nightjar-age-screen c)
  (update-bubble-pos
  (game-modify-render
   (lambda (ctx)
     (draw-weed ctx c)
     (particle-system-render ctx (nightjar-bubbles (game-data c)))
     (nightjar-all-text-lower ctx "What is your age?")
     (set! ctx.font "normal 30pt open-sans"))
   (game-modify-buttons
    (let ((age-but
           (lambda (title id)
             (empty-image-button
              title
              (+ (- default-button-x 850) (* id 280))
              default-button-y
              empty-button-width empty-button-height
              "none"
              (lambda (c)
                (play-sound "button.wav")
                (bubbles-hit! (- id 1) c)
                (game-modify-data
                 (lambda (d)
                   (nightjar-modify-player-age
                    id d))
                 (nightjar-played-before-screen c)))))))

      (list
       (age-but "Under 10" 1)
       (age-but "10 to 15" 2)
       (age-but "16 to 35" 3)
       (age-but "36 to 50" 4)
       (age-but "Over 50" 5))
     )
    c))))

(define (record-player c played-before)
  (server-call-mutate
   "player"
   (list
    (list "played_before" played-before)
    (list "age_range" (nightjar-player-age (game-data c))))
   (lambda (game data)
     (let ((id (car (JSON.parse data))))
       (nightjar-species-screen
        (game-modify-data
         (lambda (d)
           (nightjar-modify-player-id
            id (nightjar-modify-played-before played-before d)))
         game)))))
  c)

(define (nightjar-played-before-screen c)
  (update-bubble-pos
  (game-modify-render
   (lambda (ctx)
     (draw-weed ctx c)
     (particle-system-render ctx (nightjar-bubbles (game-data c)))
     (nightjar-all-text-lower ctx "Have you played this game before?")
     (set! ctx.font "normal 30pt open-sans"))
   (game-modify-buttons
    (list

     (empty-image-button
      "Yes"
      (+ default-button-x button-gap)
      default-button-y
      empty-button-width empty-button-height
      "none"
      (lambda (c)
        (play-sound "button.wav")
        (bubbles-hit! 0 c)
        (record-player c #t)))

     (empty-image-button
      "No"
      (- default-button-x button-gap)
      default-button-y
      empty-button-width empty-button-height
      "none"
      (lambda (c)
        (play-sound "button.wav")
        (bubbles-hit! 1 c)
        (record-player c #f)))) c))))


(define (nightjar-species-screen c)
  (update-bubble-pos
  (game-modify-render
   (lambda (ctx)
     (draw-weed ctx c)
     (particle-system-render ctx (nightjar-bubbles (game-data c)))
     (nightjar-all-text ctx "Will you hunt as a predatory pollock or a hungry human?")
     (set! ctx.font "normal 30pt open-sans")
     (wrap-text ctx "They see the world differently..." 0 380 1000 75)

     (centre-text2 ctx "Human"
                   (- default-button-x button-gap 100)
                   (+ default-button-y 160))
     (set! ctx.font "normal 20pt open-sans")
     (centre-text2 ctx "Trichromatic - seeing red, green and blue"
                   (- default-button-x button-gap 100)
                   (+ default-button-y 200))

     (set! ctx.font "normal 30pt open-sans")
     (centre-text2 ctx "Pollock"
                   (+ default-button-x button-gap 100)
                   (+ default-button-y 160))
     (set! ctx.font "normal 20pt open-sans")
     (centre-text2 ctx "Dichromatic - seeing yellow and blue"
                   (+ default-button-x button-gap 100)
                   (+ default-button-y 200))

     )

   (game-modify-buttons
    (list

     (image-button
      ""
      (- default-button-x button-gap 100)
      (- default-button-y 50)
      "rotate"
      (find-image "human.png")
      (lambda (c)
        (play-sound "button.wav")
        (nightjar-explain-screen
         (game-modify-data
          (lambda (d)
            (nightjar-modify-player-type "human" d))
          c))))

     (rect-button
      ""
      (- default-button-x button-gap 310)
      (+ default-button-y 20) 500 300
      "none"
      (lambda (c)
        (play-sound "button.wav")
        (bubbles-hit! 0 c)
        (nightjar-explain-screen
         (game-modify-data
          (lambda (d)
            (nightjar-modify-player-type "human" d))
          c))))


     (image-button
      ""
      (+ default-button-x button-gap 100)
      (- default-button-y 50)
      "rotate"
      (find-image "pollock.png")
      (lambda (c)
        (play-sound "button.wav")
        (nightjar-explain-screen
         (game-modify-data
          (lambda (d)
            (nightjar-modify-player-type "pollock" d))
          c))))

     (rect-button
      ""
      (+ default-button-x 150)
      (+ default-button-y 20) 500 300
      "none"
      (lambda (c)
        (bubbles-hit! 1 c)
        (play-sound "button.wav")
        (nightjar-explain-screen
         (game-modify-data
          (lambda (d)
            (nightjar-modify-player-type "pollock" d))
          c))))



    ) c))))

(define (nightjar-main-screen c data)
  (update-bubble-pos
   (game-modify-render
    (lambda (ctx)
      (draw-weed ctx c)
      (particle-system-render ctx (nightjar-bubbles (game-data c)))
      (set! ctx.font "normal 50pt open-sans")
      (wrap-text ctx "Live Experiment Results" 0 80 1000 70)
      (set! ctx.font "normal 20pt open-sans")
      (wrap-text ctx "Scientists will use these results to support their theories on the effectiveness of crab camouflage in different natural habitats" 0 130 1000 35)
      (set! ctx.font "normal 30pt open-sans")

      (set! ctx.globalAlpha 0.2)
      (set! ctx.fillStyle "#99d5cd")
      (roundRect ctx 400 210 800 650 20 #t #f)
      (set! ctx.fillStyle "#fff")
      (set! ctx.globalAlpha 1)


      (cond
       ((eq? (nightjar-results-num (game-data c)) 0)
        (render-results-3 ctx data 290))
       ((eq? (nightjar-results-num (game-data c)) 1)
        (render-results-2 ctx data 290))
       (else
        (render-results-1 ctx data 290))))


    (game-modify-buttons
     (list

            (image-button
       "" 300 480
       "rotate"
       (find-image "left-arrow.png")
       (lambda (c)
         (play-sound "button.wav")
         (game-modify-data
          (lambda (d)
            (nightjar-modify-results-num
             (modulo (- (nightjar-results-num d) 1) 3) d))
          c)))

      (image-button
       "" (- screen-width 300) 480
       "rotate"
       (find-image "right-arrow.png")
       (lambda (c)
         (play-sound "button.wav")
         (game-modify-data
          (lambda (d)
            (nightjar-modify-results-num
             (modulo (+ (nightjar-results-num d) 1) 3) d))
          c)))

     (empty-image-button
      "Play again" (- screen-width 200)
      820 empty-button-width empty-button-height "none"
      (lambda (c)
        (bubbles-hit! 0 c)
        (play-sound "button.wav")
        (nightjar-species-screen c)))


     (empty-image-button
      "Exit game" 200
      820 empty-button-width empty-button-height "none"
      (lambda (c)
        (bubbles-hit! 1 c)
        (play-sound "button.wav")
        (nightjar-intro c)))

      )
     c))))


(define (get-n-items lst num)
  (cond
   ((null? lst) ())
   ((zero? num) ())
   (else (cons (car lst) (get-n-items (cdr lst) (- num 1))))))

(define (slice lst start count)
  (if (> start 1)
      (slice (cdr lst) (- start 1) count)
      (get-n-items lst count)))

(define (record-game c)
  (server-call-mutate
   "game"
   (list
    (list "player_id" (nightjar-player-id (game-data c)))
    (list "species" (nightjar-player-type (game-data c))))
   (lambda (game data)
     (let ((id (car (JSON.parse data))))
       (nightjar-new-game-images
        (game-modify-data
         (lambda (d)
           (nightjar-modify-game-id id d))
         game)))))
  c)

(define (nightjar-explain-screen c)
  (update-bubble-pos
  (game-modify-render
   (lambda (ctx)
     (draw-weed ctx c)
     (particle-system-render ctx (nightjar-bubbles (game-data c)))
     (ctx.drawImage (find-image "example-crab.jpg") 450 230)
     (set! ctx.font "normal 30pt open-sans")
     (wrap-text ctx "There is one crab hidden in every photo, touch it as soon as you see it" 0 100 800 45))
   (game-modify-buttons
    (list

     (empty-image-button
      "Play!"
      default-button-x
      default-button-y
      empty-button-width empty-button-height
      "none"
      (lambda (c)
        (bubbles-hit! 0 c)
        (record-game c)))


     ;; (empty-image-button
     ;;  "Rock pool"
     ;;  (- default-button-x 400)
     ;;  (+ default-button-y 150)
     ;;  500 300
     ;;  "none"
     ;;  (lambda (c)
     ;;    (bubbles-hit! 0 c)
     ;;    (record-game c "rockpool")))

     ;; (empty-image-button
     ;;  "Mudflats"
     ;;  default-button-x
     ;;  (+ default-button-y 150)
     ;;  500 300
     ;;  "none"
     ;;  (lambda (c)
     ;;    (bubbles-hit! 1 c)
     ;;    (record-game c "mudflat")))

     ;; (empty-image-button
     ;;  "Mussel bed"
     ;;  (+ default-button-x 400)
     ;;  (+ default-button-y 150)
     ;;  500 300
     ;;  "none"
     ;;  (lambda (c)
     ;;    (bubbles-hit! 2 c)
     ;;    (record-game c "musselbed")))
     ) c))))

(define (prep-path p)
  (p.replace (js "new RegExp('/', 'g')") ":"))

(define (record-click c success)
  (let ((photo (car (nightjar-images (game-data c))))
        (crab (car (nightjar-crabs (game-data c)))))
    (let ((photo-habitat (photo-habitat photo))
          (crab-habitat (photo-habitat crab))
          (photoname (photo-filename photo))
          (crabname (photo-filename crab)))
      (server-call
       "click"
       (list
        (list "game_id" (nightjar-game-id (game-data c)))
        (list "photo_name" (prep-path photoname))
        (list "crab_name" (prep-path crabname))
        (list "photo_habitat" photo-habitat)
        (list "crab_habitat" crab-habitat)
        (list "crab_x" (car (nightjar-crab-pos (game-data c))))
        (list "crab_y" (cadr (nightjar-crab-pos (game-data c))))
        (list "crab_rot" (nightjar-crab-rotation (game-data c)))
        (list "time_stamp" (- (game-time c) (nightjar-photo-time (game-data c))))
        (list "x_position" (game-mx c))
        (list "y_position" (game-my c))
        (list "success" success))))))

(define (record-crab-time c success_code)
  (let ((photo (car (nightjar-images (game-data c))))
        (crab (car (nightjar-crabs (game-data c)))))
    (let ((photo-habitat (photo-habitat photo))
          (crab-habitat (photo-habitat crab))
          (photoname (photo-filename photo))
          (crabname (photo-filename crab)))
      (server-call
       "crab-time"
       (list
        (list "game_id" (nightjar-game-id (game-data c)))
        (list "photo_name" (prep-path photoname))
        (list "crab_name" (prep-path crabname))
        (list "photo_habitat" photo-habitat)
        (list "crab_habitat" crab-habitat)
        (list "time_stamp" (- (game-time c) (nightjar-photo-time (game-data c))))
        (list "success_code" success_code))))))

(define (draw-crab ctx crab-image crab-x crab-y crab-rot)
  (ctx.save)
  (ctx.translate crab-x crab-y)
  (ctx.translate (/ crab-image.width 2) (/ crab-image.height 2))
  (ctx.rotate crab-rot)
  (ctx.translate (- 0 (/ crab-image.width 2))
                 (- 0 (/ crab-image.height 2)))
  (ctx.drawImage crab-image 0 0)
  (ctx.restore))

(define (nightjar-game c)
  ;; todo: choose and delete

  (define example (car (nightjar-images (game-data c))))
  (define crab (car (nightjar-crabs (game-data c))))
  (define crab-image (find-image (photo-filename crab)))
  (define crab-x (- (car (nightjar-crab-pos (game-data c)))
                    (/ crab-image.width 2)))
  (define crab-y (- (cadr (nightjar-crab-pos (game-data c)))
                    (/ crab-image.height 2)))

  (game-modify-render
   (lambda (ctx)
     (ctx.drawImage
      (find-image (photo-filename example)) 0 0)

     (draw-crab
      ctx crab-image crab-x crab-y
      (nightjar-crab-rotation (game-data c)))

     (sprite-render
      ctx
      (game-time c)
      (nightjar-sprite (game-data c)))

     (nightjar-draw-clock
      ctx (/ (- (game-time c)
                (nightjar-start-time (game-data c)))
             1000) game-time-allowed))

   (game-modify-update
    (lambda (t c)
      (if (> (- (game-time c)
                (nightjar-start-time (game-data c)))
             (* game-time-allowed 1000))
          (begin
            (record-crab-time c 1)
            (nightjar-fail
             (photo-desc example)
             (string-append
              "Ran out of time finding this crab on "
              (photo-desc example)
              " - you'll go hungry tonight!") c))
          c))

    (game-modify-buttons
     (list

      ;; (image-button
      ;;  "I give up"
      ;;  (- screen-width 100)
      ;;  (- screen-height 100)
      ;;  #f
      ;;  (find-image "quit.png")
      ;;  (lambda (c)
      ;;    (record-crab-time c 2)
      ;;    (nightjar-fail
      ;;     (photo-desc example)
      ;;     (string-append
      ;;      "You couldn't find this crab on "
      ;;      (photo-desc example)
      ;;      " - you'll go hungry tonight!")
      ;;     c)))

      ;; button over nightjar
      (rect-button
       "" crab-x crab-y crab-image.width crab-image.height #f
       (lambda (c)
         (play-sound "found.wav")
         (record-crab-time c 0)
         (nightjar-win
          (photo-desc example)
          (game-modify-data
           (lambda (d)
             (record-click c 1)
             (nightjar-modify-sprite
              (sprite (- (game-mx c) 88)
                      (- (game-my c) 88)
                      "right.png" (+ (game-time c) 2000))
              (nightjar-modify-score
               (- (game-time c) (nightjar-start-time d)) d)))
           c))))

      ;; big lose button over whole screen
      (rect-button
       ""
       0 0 screen-width screen-height #f
       (lambda (c)
         (play-sound "notfound.wav")
         (game-modify-data
          (lambda (d)
            (record-click c 0)
            (nightjar-modify-sprite
             (sprite (- (game-mx c) 88)
                     (- (game-my c) 88)
                     "wrong.png" (+ (game-time c) 2000)) d))
          c)))

      ) c))))

(define (nightjar-fail desc reason c)
  (set! bubbles (bubbles-reset bubbles))
  (define example (car (nightjar-images (game-data c))))
  (define crab (car (nightjar-crabs (game-data c))))
  (define crab-image (find-image (photo-filename crab)))
  (define crab-x (- (car (nightjar-crab-pos (game-data c)))
                    (/ crab-image.width 2)))
  (define crab-y (- (cadr (nightjar-crab-pos (game-data c)))
                    (/ crab-image.height 2)))

  (update-bubble-pos
  (game-modify-render
   (lambda (ctx)
     (ctx.drawImage
      (find-image (photo-filename example))
      0 0)

     (draw-crab
      ctx crab-image crab-x crab-y
      (nightjar-crab-rotation (game-data c)))

     ;; highlight the crab
     (set! ctx.strokeStyle "#99d5cd")
     (ctx.setLineDash (list 20 20))
     (set! ctx.lineWidth 10)
     (ctx.beginPath)
     (ctx.arc (car (nightjar-crab-pos (game-data c)))
              (cadr (nightjar-crab-pos (game-data c)))
              (/ crab-image.width 2) 0 (* Math.PI 2) true)
     (ctx.closePath)
     (ctx.stroke)
     (set! ctx.lineWidth 1)

     (particle-system-render ctx (nightjar-bubbles (game-data c)))

     (sprite-render
      ctx
      (game-time c)
      (nightjar-sprite (game-data c)))

     (set! ctx.font "normal 30pt open-sans")
     (nightjar-all-text ctx reason)
     (set! ctx.font "normal 30pt open-sans"))

   (game-modify-update
    (lambda (t c) c)

    (game-modify-buttons
     (list

      (empty-image-button
       "Next crab"
       default-button-x
       default-button-y
       empty-button-width empty-button-height
       "none"
       (lambda (c)
        (bubbles-hit! 0 c)
         (play-sound "button.wav")
         ;; check end of game
         (if (eq? (length (nightjar-images (game-data c))) 1)
             (nightjar-get-score c "Well done!")
             (nightjar-new-game-reset-timer c))))

      ;; (empty-image-button
      ;;  "Quit"
      ;;  (- default-button-x button-gap)
      ;;  default-button-y
      ;;  empty-button-width empty-button-height
      ;;  "none"
      ;;  (lambda (c)
      ;;    (bubbles-hit! 1 c)
      ;;    (play-sound "button.wav")
      ;;    ;; check end of game
      ;;    (nightjar-get-score c "Thank you for playing.")))


      ) c)))))

(define (nightjar-win desc c)
  (set! bubbles (bubbles-reset bubbles))
  (define example (car (nightjar-images (game-data c))))
  (define crab (car (nightjar-crabs (game-data c))))
  (define crab-image (find-image (photo-filename crab)))
  (define crab-x (- (car (nightjar-crab-pos (game-data c)))
                    (/ crab-image.width 2)))
  (define crab-y (- (cadr (nightjar-crab-pos (game-data c)))
                    (/ crab-image.height 2)))

  (update-bubble-pos
  (game-modify-render
   (lambda (ctx)
     (ctx.drawImage
      (find-image (photo-filename example) image-lib)
      0 0)

     (draw-crab
      ctx crab-image crab-x crab-y
      (nightjar-crab-rotation (game-data c)))

     (particle-system-render ctx (nightjar-bubbles (game-data c)))

     (sprite-render
      ctx
      (game-time c)
      (nightjar-sprite (game-data c)))

     (let ((done (+ (- 20 (length (nightjar-images (game-data c)))) 1)))
       (nightjar-all-text
        ctx (+ "You caught this crab on " desc " in "
               (/ (nightjar-score (game-data c)) 1000)
               " seconds. " (- 20 done) " crabs left to go!")))
     (set! ctx.font "normal 30pt open-sans"))

   (game-modify-update
    (lambda (t c) c)

    (game-modify-buttons
     (list
      (empty-image-button
       "Next crab"
       default-button-x
       default-button-y
       empty-button-width empty-button-height
       "none"
       (lambda (c)
         (play-sound "button.wav")
        (bubbles-hit! 0 c)
         ;; check end of game
         (if (eq? (length (nightjar-images (game-data c))) 1)
             (nightjar-get-score c "Well done!")
             (nightjar-new-game-reset-timer c))))
      ) c)))))

(define (nightjar-get-score c reason)
  (server-call-mutate
   "score"
   (list
    (list "game_id" (nightjar-game-id (game-data c))))
   (lambda (game data)
     (let ((score (JSON.parse data)))
       (nightjar-finish game
                        (list-ref score 0)
                        (list-ref score 1)
                        (list-ref score 2)
                        reason))))
  c)

(define (score-to-text score)
  (cond
   ((eq? score 1) "1st")
   ((eq? score 2) "2nd")
   ((eq? score 3) "3rd")
   (else (+ score "th"))))

(define (get-score-text score count)
  (if (> count 5)
      (+ " You made position " score " out of all the people who've played so far!")
      "Find more crabs to get a ranking"))

(define (trunc a)
  (/ (Math.floor (* a 100)) 100))

(define (nightjar-finish c av score count reason)
  (set! bubbles (bubbles-reset bubbles))
  (update-bubble-pos
  (game-modify-render
   (lambda (ctx)
     (draw-weed ctx c)
     (particle-system-render ctx (nightjar-bubbles (game-data c)))
     (nightjar-all-text
      ctx (+ reason " Your average crab spotting time is " (trunc (/ av 1000)) " seconds"))

     (wrap-text ctx (get-score-text score count) 0 430 800 55)
     )

   (game-modify-update
    (lambda (t c) c)

    (game-modify-buttons
     (list
      (if (and #f
               (eq? (nightjar-username (game-data c)) "???")
               (> count 5))
          (empty-image-button
           "Enter Your Name"
           default-button-x
           default-button-y
           empty-button-width empty-button-height
           "none"
           (lambda (c)
             (bubbles-hit! 0 c)
             (play-sound "button.wav")
             (nightjar-enter-name c)))

          (empty-image-button
           "Continue"
           default-button-x
           default-button-y
           empty-button-width empty-button-height
           "none"
           (lambda (c)
             (bubbles-hit! 0 c)
             (play-sound "button.wav")
             (server-call-mutate
              "stats" ()
              (lambda (game data)
                (play-sound "button.wav")
                (nightjar-main-screen game (JSON.parse data))))
             c))))
     c)))))


(define (type-into str ch)
  (car
   (foldl
    (lambda (c r)
      (if (and (not (cadr r)) (eq? c "?"))
          (list (string-append (car r) ch) #t)
          (list (string-append (car r) c) (cadr r))))
    (list "" #f)
    (str.split ""))))

(define (type-into-delete str)
  (car (foldl
        (lambda (c r)
          ;;(console.log (list c r))
          (if (and (not (cadr r)) (not (eq? c "?")))
              (list (string-append "?" (car r)) #t)
              (list (string-append c (car r)) (cadr r))))
        (list "" #f)
        (reverse (str.split "")))))

(define (type-username ch c)
  (game-modify-data
   (lambda (d)
     (nightjar-modify-username (dbg (type-into (dbg (nightjar-username d)) ch)) d))
   c))

(define (type-delete c)
  (game-modify-data
   (lambda (d)
     (nightjar-modify-username (type-into-delete (nightjar-username d)) d))
   c))

(define (nightjar-enter-name c)
  (update-bubble-pos
  (game-modify-update
   (lambda (t c) c)
   (game-modify-render
    (lambda (ctx)
      (draw-weed ctx c)
      (particle-system-render ctx (nightjar-bubbles (game-data c)))
      (set! ctx.font "normal 30pt open-sans")
      (wrap-text ctx "Enter your name" 0 200 1000 70)
      (set! ctx.font "normal 50pt open-sans")
      (wrap-text ctx (nightjar-username (game-data c)) 0 280 1000 70)
      (set! ctx.font "normal 30pt open-sans"))

    (game-modify-buttons
     (append
      (index-map
       (lambda (i ch)
         (let ((x (+ 100 (* (modulo i 10) 120)))
               (y (+ 400 (* (Math.floor (/ i 10)) 130))))
           (image-button ch x y #f (small-button-image)
                         (lambda (c)
                           (play-sound "button.wav")
                           (type-username ch c)))))
       (list "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M"
             "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"))

      (list
       (empty-image-button "Delete" 1200 700 empty-button-width empty-button-height #t
                           (lambda (c)
                             (play-sound "button.wav")
                             (bubbles-hit! 0 c)
                             (type-delete c)))

       (empty-image-button "Done" 1450 700 empty-button-width empty-button-height "none"
                     (lambda (c)
                       (bubbles-hit! 1 c)
                       (play-sound "button.wav")
                       (server-call
                        "player-name"
                        (list
                         (list "player_id" (nightjar-player-id (game-data c)))
                         (list "player_name" (nightjar-username (game-data c)))))
                       (server-call-mutate
                        "stats" ()
                        (lambda (game data)
                          (play-sound "button.wav")
                          (nightjar-main-screen game (JSON.parse data))))
                       c)))
      )
     c)))))



(define (nightjar-results c data)
  (update-bubble-pos
   (game-modify-render
    (lambda (ctx)
      (draw-weed ctx c)
      (particle-system-render ctx (nightjar-bubbles (game-data c)))
      (set! ctx.font "normal 50pt open-sans")
      (wrap-text ctx "Live Experiment Results" 0 80 1000 70)
      (set! ctx.font "normal 20pt open-sans")
      (wrap-text ctx "Scientists will use these results to support their theories on the effectiveness of crab camouflage in different natural habitats" 0 130 1000 35)
      (set! ctx.font "normal 30pt open-sans")

      (set! ctx.globalAlpha 0.2)
      (set! ctx.fillStyle "#99d5cd")
      (roundRect ctx 400 210 800 650 20 #t #f)
      (set! ctx.fillStyle "#fff")
      (set! ctx.globalAlpha 1)


      (cond
       ((eq? (nightjar-results-num (game-data c)) 0)
        (render-results-3 ctx data 290))
       ((eq? (nightjar-results-num (game-data c)) 1)
        (render-results-2 ctx data 290))
       (else
        (render-results-1 ctx data 290))))


    (game-modify-buttons
     (list
      (image-button
       "" 300 480
       "rotate"
       (find-image "left-arrow.png")
       (lambda (c)
         (play-sound "button.wav")
         (game-modify-data
          (lambda (d)
            (nightjar-modify-results-num
             (modulo (- (nightjar-results-num d) 1) 3) d))
          c)))

      (image-button
       "" (- screen-width 300) 480
       "rotate"
       (find-image "right-arrow.png")
       (lambda (c)
         (play-sound "button.wav")
         (game-modify-data
          (lambda (d)
            (nightjar-modify-results-num
             (modulo (+ (nightjar-results-num d) 1) 3) d))
          c)))

      (empty-image-button
       "Back"
       (- screen-width 200)
       (+ default-button-y 150)
       empty-button-width empty-button-height "none"
       (lambda (c)
         (bubbles-hit! 0 c)
         (play-sound "button.wav")
         (nightjar-intro c)))
      )
     c))))





(set! ctx.font "normal 75pt open-sans")
(centre-text ctx "Loading..." 240)

(load-sounds!
 (list
  "button.wav"
  "found.wav"
  "notfound.wav"
  ))


(load-images!
 (list "button-1.png"
       "button-2.png"
       "button-3.png"
       "button-s1.png"
       "quit.png"
       "right.png"
       "wrong.png"
       "foam.png"
       "sensory-ecology.png"
       "example-crab.jpg"
       "cutoutweed.png"
       "cutoutweed2.png"
       "cutoutweed3.png"
       "cutoutweed4.png"
       "cutoutweed5.png"
       "cutoutweed6.png"
       "cutoutweed7.png"
       "cutoutweed8.png"
       "human.png"
       "pollock.png"
       "bubble-1.png"
       "bubble-2.png"
       "bubble-3.png"
       "bubble-4.png"
       "bubble-5.png"
       "bubble-6.png"
       "crab1.png"
       "crab2.png"
       "rockpool-crab.png"
       "mudflat-crab.png"
       "musselbed-crab.png"
       "starfish.png"
       "left-arrow.png"
       "right-arrow.png"
       )
 (lambda ()
   (set! bubbles (build-bubbles))
   (start-game canvas ctx)))
