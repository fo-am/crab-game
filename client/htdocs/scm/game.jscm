;; -*- mode: scheme; -*-
; ------------------------------------------------
;; Copyright (C) 2016 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(load "scm/maths.jscm")
(load "scm/random.jscm")
(load "scm/nightjar.jscm")

(define rockpool-filenames
   (list
    "test-1.jpg"
    "test-2.jpg"
    "test-3.jpg"
    "test-1.jpg"
    "test-2.jpg"
    "test-3.jpg"
    "test-1.jpg"
    "test-2.jpg"
    "test-3.jpg"
    "test-1.jpg"
    "test-2.jpg"
    "test-3.jpg"
    "test-1.jpg"
    "test-2.jpg"
    "test-3.jpg"
    "test-1.jpg"
    "test-2.jpg"
    "test-3.jpg"
    ))

(define mudflat-filenames
   (list
    "test-1.jpg"
    "test-2.jpg"
    "test-3.jpg"
    "test-1.jpg"
    "test-2.jpg"
    "test-3.jpg"
    "test-1.jpg"
    "test-2.jpg"
    "test-3.jpg"
    "test-1.jpg"
    "test-2.jpg"
    "test-3.jpg"
    "test-1.jpg"
    "test-2.jpg"
    "test-3.jpg"
    "test-1.jpg"
    "test-2.jpg"
    "test-3.jpg"
    ))

(define musselbed-filenames
  (list
    "test-1.jpg"
    "test-2.jpg"
    "test-3.jpg"
    "test-1.jpg"
    "test-2.jpg"
    "test-3.jpg"
    "test-1.jpg"
    "test-2.jpg"
    "test-3.jpg"
    "test-1.jpg"
    "test-2.jpg"
    "test-3.jpg"
    "test-1.jpg"
    "test-2.jpg"
    "test-3.jpg"
    "test-1.jpg"
    "test-2.jpg"
    "test-3.jpg"
    "test-1.jpg"
    "test-2.jpg"
    "test-3.jpg"
   ))

(define crab-filenames
  (list
   "crab-1.png"
   "crab-2.png"
   "crab-3.png"
   "crab-1.png"
   "crab-2.png"
   "crab-3.png"
   "crab-1.png"
   "crab-2.png"
   "crab-3.png"
   "crab-1.png"
   "crab-2.png"
   "crab-3.png"
   "crab-1.png"
   "crab-2.png"
   "crab-3.png"
   "crab-1.png"
   "crab-2.png"
   "crab-3.png"
   ))

(define (filename-to-type fn)
  (let ((a (fn.substring 0 2)))
    (if (eq? a "Ch")
        (let ((b (fn.substring 0 4)))
          (cond
           ((eq? b "ChMa") "white-fronted plover")
           ((eq? b "ChTr") "three-banded plover")
           ((eq? b "ChPa") "chestnut-banded plover")
           (else (msg fn) (msg "unknown1:" fn b) "unknown plover")))
        (cond
         ((eq? a "Cu") "temminck's courser")
         ((eq? a "RC") "bronze-winged courser")
         ((eq? a "VS") "african wattled plover")
         ((eq? a "VA") "blacksmith plover")
         ((eq? a "VC") "crowned plover")
         (else
          "unknown beach")))))

(define filenames
  (list
   (map (lambda (f) (list (string-append "rockpool/" f) (filename-to-type f))) rockpool-filenames)
   (map (lambda (f) (list (string-append "rockpool/dic-" f) (filename-to-type f))) rockpool-filenames)
   (map (lambda (f) (list (string-append "mudflat/" f) (filename-to-type f))) mudflat-filenames)
   (map (lambda (f) (list (string-append "mudflat/dic-" f) (filename-to-type f))) mudflat-filenames)
   (map (lambda (f) (list (string-append "musselbed/" f) (filename-to-type f))) mudflat-filenames)
   (map (lambda (f) (list (string-append "musselbed/dic-" f) (filename-to-type f))) mudflat-filenames)
   (map (lambda (f) (list (string-append "crabs/" f) (filename-to-type f))) crab-filenames)
   (map (lambda (f) (list (string-append "crabs/dic-" f) (filename-to-type f))) crab-filenames)
   ))

(define (photo-filename l) (list-ref l 0))
(define (photo-desc l) (list-ref l 1))

(define photos
  (map
   (lambda (l)
     (map
      (lambda (fn)
        (list
         (+ "photos/" (car fn))
         (cadr fn))) l))
   filenames))

(define (rockpool-photos l) (list-ref l 0))
(define (rockpool-dic-photos l) (list-ref l 1))
(define (mudflat-photos l) (list-ref l 2))
(define (mudflat-dic-photos l) (list-ref l 3))
(define (musselbed-photos l) (list-ref l 4))
(define (musselbed-dic-photos l) (list-ref l 5))
(define (crab-photos l) (list-ref l 6))
(define (crab-dic-photos l) (list-ref l 7))

(define (button-image)
  (find-image (choose (list "button-1.png"))))

(define (small-button-image)
  (find-image (choose (list "button-s1.png"))))


;; get from image structure
(define image-width 2474)
(define image-height 1640)
(define image-centre-x (/ image-width 2))
(define image-centre-y (/ image-height 2))

(define safe-x 0.2)
(define safe-y 0.2)

(define (generate-image-pos)
  (list (- (* screen-width (+ safe-x (* (rndf) (- 1 (* safe-x 2))))) image-centre-x)
        (- (* screen-height (+ safe-y (* (rndf) (- 1 (* safe-y 2))))) image-centre-y)))

(define default-button-x (- (/ screen-width 2) 0))
(define default-button-y (+ (/ screen-height 2) 120))
(define button-gap 250)
(define game-time-allowed 2)
(define num-examples 5)

(define (empty-nightjar-data)
  (list 0 0 0 "" #f 0 () () 0 (sprite 0 0 "wrong.png" 0) 0 "???" ()))

(define (nightjar-start-time g) (list-ref g 0))
(define (nightjar-modify-start-time v g) (list-replace g 0 v))
(define (nightjar-photo-time g) (list-ref g 1))
(define (nightjar-modify-photo-time v g) (list-replace g 1 v))
(define (nightjar-player-id g) (list-ref g 2))
(define (nightjar-modify-player-id v g) (list-replace g 2 v))
(define (nightjar-player-type g) (list-ref g 3))
(define (nightjar-modify-player-type v g) (list-replace g 3 v))
(define (nightjar-played-before g) (list-ref g 4))
(define (nightjar-modify-played-before v g) (list-replace g 4 v))
(define (nightjar-player-age g) (list-ref g 5))
(define (nightjar-modify-player-age v g) (list-replace g 5 v))
(define (nightjar-images g) (list-ref g 6))
(define (nightjar-modify-images v g) (list-replace g 6 v))
(define (nightjar-image-pos g) (list-ref g 7))
(define (nightjar-modify-image-pos v g) (list-replace g 7 v))
(define (nightjar-score g) (list-ref g 8))
(define (nightjar-modify-score v g) (list-replace g 8 v))
(define (nightjar-sprite g) (list-ref g 9))
(define (nightjar-modify-sprite v g) (list-replace g 9 v))
(define (nightjar-level g) (list-ref g 10))
(define (nightjar-modify-level v g) (list-replace g 10 v))
(define (nightjar-username g) (list-ref g 11))
(define (nightjar-modify-username v g) (list-replace g 11 v))
(define (nightjar-crabs g) (list-ref g 12))
(define (nightjar-modify-crabs v g) (list-replace g 12 v))

(define (time-left c)
  (* (- (game-time c)
        (nightjar-start-time (game-data c)))
     0.001))

(define (nightjar-new-game c)
  (nightjar-game
   (game-modify-data
    (lambda (d)
      (nightjar-modify-start-time
       (game-time c) d))
    (game-modify-data
     (lambda (d)
       (nightjar-modify-image-pos
        (generate-image-pos)
        (nightjar-modify-sprite
         (sprite -999 -999 "right.png" 0)
         d)))
     c))))

(define (nightjar-new-game-reset-timer n c)
  (load-images-mutate
   (lambda (c)
     (nightjar-new-game
      (game-modify-data
       (lambda (d)
         (nightjar-modify-images
          (cdr (nightjar-images d))
          (nightjar-modify-crabs
           (cdr (nightjar-crabs d))
           (nightjar-modify-photo-time
            (game-time c) d))))
       c)))
   (list
    (photo-filename (list-ref (nightjar-images (game-data c)) n))
    (photo-filename (list-ref (nightjar-crabs (game-data c)) n))))
  (game-modify-buttons
   ()
   (game-modify-render
    (lambda (ctx)
      (let ((example (car (nightjar-images (game-data c)))))
        (ctx.drawImage
         (find-image (photo-filename example))
         0 0)
        (nightjar-all-text ctx "Loading your next crab...")))
    c)))

(define (nightjar-new-game-images c)
  (let ((backgrounds
         (cond
          ((eq? (nightjar-player-type (game-data c)) "human")
           (cond
            ((eq? (nightjar-level (game-data c)) 0)
             (rockpool-photos photos))
            ((eq? (nightjar-level (game-data c)) 1)
             (mudflat-photos photos))
            (else
             (musselbed-photos photos))))
          (else
           (cond
            ((eq? (nightjar-level (game-data c)) 0)
             (rockpool-dic-photos photos))
            ((eq? (nightjar-level (game-data c)) 1)
             (mudflat-dic-photos photos))
            (else
             (musselbed-dic-photos photos))))))
        (crab-images
         (cond
          ((eq? (nightjar-player-type (game-data c)) "human")
           (msg "human")
           (crab-photos photos))
          (else
           (msg "other")
           (crab-dic-photos photos)))))

    (play-sound "button.wav")

    (let ((images (crop (shuffle backgrounds) num-examples))
          (crab-images (crop (shuffle crab-images) num-examples)))
      (load-images-mutate
       (lambda (c)
         (nightjar-new-game
          (game-modify-data
           (lambda (d)
             (nightjar-modify-photo-time
              (game-time c)
              (nightjar-modify-images
               images (nightjar-modify-crabs crab-images d))))
           c)))
       (list
        (photo-filename (list-ref images 0))
        (photo-filename (list-ref crab-images 0))))
      (game-modify-buttons
       ()
       (game-modify-render
        (lambda (ctx)
          (nightjar-all-text ctx "Loading your first crab..."))
        c)))))

(define (nightjar-intro c)
  (let ((icon-x 150)
        (icon-y (+ default-button-y 100)))
  (game-modify-data
   (lambda (d)
     (empty-nightjar-data))
   (game-modify-render
    (lambda (ctx)
      (nightjar-heading ctx "Crab game title")
      (nightjar-text ctx "Hunt for crabs and help sensory research")
      (set! ctx.font "normal 30pt open-sans"))

    (game-modify-buttons
     (list
      (image-button
       "Start playing"
       (- default-button-x 200)
       default-button-y
       "slidy"
       (button-image)
       (lambda (c)
         (play-sound "button.wav")
         (nightjar-experiment-screen c)))

      (image-button
       "Hi Scores"
       (+ default-button-x 200)
       default-button-y
       "slidy"
       (button-image)
       (lambda (c)
         (server-call-mutate
          "hiscores" ()
          (lambda (game data)
            (let ((hiscores (JSON.parse data)))
              (nightjar-hiscores hiscores game))))
         (play-sound "button.wav")
         c))


      )
     c)))))

(define (time-to-seconds t)
  (/ (Math.floor (/ t 10)) 100))

(define (nightjar-hiscores table c)
  (game-modify-update
   (lambda (t c) c)
   (game-modify-render
    (lambda (ctx)
      (set! ctx.font "normal 50pt open-sans")
      (wrap-text ctx (string-append "Hall of fame") 0 100 1000 70)
      (set! ctx.font "normal 30pt open-sans")

      (index-for-each
       (lambda (i e)
         (when (not (eq? (cadr e) 999999))
               (let ((txt (string-append (car e) " : " (time-to-seconds (cadr e)))))
                 (wrap-text ctx txt -200 (+ 240 (* 40 i))))))
       (car table))

      (index-for-each
       (lambda (i e)
         (when (not (eq? (cadr e) 999999))
               (let ((txt (string-append (car e) " : " (time-to-seconds (cadr e)))))
                 (set! ctx.fillStyle "#fff")
                 (wrap-text ctx txt 200 (+ 240 (* 40 i))))))
       (cadr table))

      )
    (game-modify-buttons
     (list
      (image-button
       "Back" 1150 720 "slidy" (button-image)
       (lambda (c) (nightjar-intro c))))
     c))))


(define (nightjar-experiment-screen c)
  (game-modify-render
   (lambda (ctx)
     (nightjar-all-text ctx "We would like to use results from your game for a scientific publication, is that ok?")
     (set! ctx.font "normal 30pt open-sans")
     (wrap-text ctx "We are using age and timing information" 0 450 1000 75))

   (game-modify-buttons
    (list

     (image-button
      "Yes that's fine"
      (+ default-button-x button-gap)
      default-button-y
      "slidy"
      (button-image)
      (lambda (c)
        (play-sound "button.wav")
        (nightjar-age-screen c)))

     (image-button
      "Back"
      (- default-button-x button-gap)
      default-button-y
      "slidy"
      (button-image)
      (lambda (c)
        (play-sound "button.wav")
        (nightjar-intro c))))
    c)))

(define (nightjar-age-screen c)
  (game-modify-render
   (lambda (ctx)
     (nightjar-all-text ctx "What is your age?")
     (set! ctx.font "normal 30pt open-sans"))
   (game-modify-buttons
    (let ((age-but
           (lambda (title id)
             (image-button
              title
              (+ (- default-button-x 750) (* id 250))
              default-button-y
              "slidy"
              (small-button-image)
              (lambda (c)
                (play-sound "button.wav")
                (game-modify-data
                 (lambda (d)
                   (nightjar-modify-player-age
                    id d))
                 (nightjar-played-before-screen c)))))))

      (list
       (age-but "Younger than 10" 1)
       (age-but "10 to 15" 2)
       (age-but "16 to 35" 3)
       (age-but "36 to 50" 4)
       (age-but "Older than 50" 5))
     )
    c)))


(define (nightjar-played-before-screen c)
  (game-modify-render
   (lambda (ctx)
     (nightjar-all-text
      ctx
      (+ "Have you played this game before?"))
     (set! ctx.font "normal 30pt open-sans"))
   (game-modify-buttons
    (list

     (image-button
      "Yes"
      (+ default-button-x button-gap)
      default-button-y
      "slidy"
      (button-image)
      (lambda (c)
        (play-sound "button.wav")
        (nightjar-species-screen
         (game-modify-data
          (lambda (d)
            (nightjar-modify-played-before #t d))
          c))))

     (image-button
      "No"
      (- default-button-x button-gap)
      default-button-y
      "slidy"
      (button-image)
      (lambda (c)
        (play-sound "button.wav")
        (nightjar-species-screen
         (game-modify-data
          (lambda (d)
            (nightjar-modify-played-before #f d))
          c))))
    ) c)))

(define (nightjar-species-screen c)
  (game-modify-render
   (lambda (ctx)
     (nightjar-all-text ctx "What predator species would you like to be?")
     (set! ctx.font "normal 30pt open-sans")
     (wrap-text ctx "They see the world differently..." 0 450 1000 75)
     )

   (game-modify-buttons
    (list

     (image-button
      "Hungry human"
      (+ default-button-x button-gap)
      default-button-y
      "slidy"
      (button-image)
      (lambda (c)
        (play-sound "button.wav")
        (nightjar-explain-screen
         (game-modify-data
          (lambda (d)
            (nightjar-modify-player-type "human" d))
          c))))

     (image-button
      "Crab eating fish"
      (- default-button-x button-gap)
      default-button-y
      "slidy"
      (button-image)
      (lambda (c)
        (play-sound "button.wav")
        (nightjar-explain-screen
         (game-modify-data
          (lambda (d)
            (nightjar-modify-player-type "fish" d))
          c))))
    ) c)))


(define (get-n-items lst num)
  (cond
   ((null? lst) ())
   ((zero? num) ())
   (else (cons (car lst) (get-n-items (cdr lst) (- num 1))))))

(define (slice lst start count)
  (if (> start 1)
      (slice (cdr lst) (- start 1) count)
      (get-n-items lst count)))

(define (nightjar-explain-screen c)
  (game-modify-render
   (lambda (ctx)
     (ctx.drawImage (find-image "example-crab.jpg") 450 200)
     (set! ctx.font "normal 30pt open-sans")
     (wrap-text ctx "There is one crab hidden in every photo, touch it as soon as you see it" 0 100 1000 75)
     (wrap-text ctx "Where would you like to hunt?" 0 600 1000 75))
   (game-modify-buttons
    (list

     (image-button
      "Rock pool"
      (- default-button-x 400)
      (+ default-button-y 150)
      "slidy"
      (button-image)
      (lambda (c)
        (server-call-mutate
         "player"
         (list
          (list "species" (nightjar-player-type (game-data c)))
          (list "played_before" (nightjar-played-before (game-data c)))
          (list "age_range" (nightjar-player-age (game-data c))))
         (lambda (game data)
           (let ((id (car (JSON.parse data))))
             ;;(alert id)
             (nightjar-new-game-images
              (game-modify-data
               (lambda (d)
                 (nightjar-modify-player-id
                  id (nightjar-modify-level 0 d)))
               game)))))
         c))

     (image-button
      "Mudflats"
      default-button-x
      (+ default-button-y 150)
      "slidy"
      (button-image)
      (lambda (c)
        (server-call-mutate
         "player"
         (list
          (list "species" (nightjar-player-type (game-data c)))
          (list "played_before" (nightjar-played-before (game-data c)))
          (list "age_range" (nightjar-player-age (game-data c))))
         (lambda (game data)
           (let ((id (car (JSON.parse data))))
             ;;(alert id)
             (nightjar-new-game-images
              (game-modify-data
               (lambda (d)
                 (nightjar-modify-player-id
                  id (nightjar-modify-level 1 d)))
               game)))))
         c))

     (image-button
      "Mussel bed"
      (+ default-button-x 400)
      (+ default-button-y 150)
      "slidy"
      (button-image)
      (lambda (c)
        (server-call-mutate
         "player"
         (list
          (list "species" (nightjar-player-type (game-data c)))
          (list "played_before" (nightjar-played-before (game-data c)))
          (list "age_range" (nightjar-player-age (game-data c))))
         (lambda (game data)
           (let ((id (car (JSON.parse data))))
             ;;(alert id)
             (nightjar-new-game-images
              (game-modify-data
               (lambda (d)
                 (nightjar-modify-player-id
                  id (nightjar-modify-level 2 d)))
               game)))))
         c))

     )

    c)))

(define (record-click c success)
  (server-call
   "click"
   (list
    (list "player_id" (nightjar-player-id (game-data c)))
    (list "photo_name" (photo-filename (car (nightjar-images (game-data c)))))
    (list "photo_offset_x" 0)
    (list "photo_offset_y" 0)
    (list "time_stamp" (- (game-time c) (nightjar-photo-time (game-data c))))
    (list "x_position" (game-mx c))
    (list "y_position" (game-my c))
    (list "success" success)
    (list "level" (if (eq? (nightjar-level (game-data c)) 0) "easy" "hard")))))


(define (nightjar-game c)
  ;; todo: choose and delete

  (define example (car (nightjar-images (game-data c))))
  (define crab (car (nightjar-crabs (game-data c))))

  (game-modify-render
   (lambda (ctx)
     (ctx.drawImage (find-image (photo-filename example)) 0 0)
     (ctx.drawImage (find-image (photo-filename crab)) 100 100)

     (sprite-render
      ctx
      (game-time c)
      (nightjar-sprite (game-data c)))

     (nightjar-draw-clock
      ctx (/ (- (game-time c)
                (nightjar-start-time (game-data c)))
             1000) game-time-allowed))

   (game-modify-update
    (lambda (t c)
      (if (> (- (game-time c)
                (nightjar-start-time (game-data c)))
             (* game-time-allowed 1000))
          (nightjar-fail
           (photo-desc example)
           (string-append
            "Ran out of time finding this crab from "
            (photo-desc example)
            " - you'll go hungry tonight!") c)
          c))

    (game-modify-buttons
     (list

      (image-button
       "I give up"
       (- screen-width 150)
       (- screen-height 150)
       #f
       (find-image "quit.png")
       (lambda (c)
         (nightjar-fail
          (photo-desc example)
          (string-append
           "You couldn't find this crab from "
           (photo-desc example)
           " - you'll go hungry tonight!")
          c)))

      ;; button over nightjar
      (rect-button
       ""
       100 100 100 100
       #f
       (lambda (c)
         (play-sound "found.wav")
         (nightjar-win
          (photo-desc example)
          (game-modify-data
           (lambda (d)
             (record-click c 1)
             (nightjar-modify-sprite
              (sprite (- (game-mx c) 126)
                      (- (game-my c) 105)
                      "right.png" (+ (game-time c) 2000))
              (nightjar-modify-score
               (- (game-time c) (nightjar-start-time d)) d)))
           c))))

      ;; big lose button over whole screen
      (rect-button
       ""
       0 0 screen-width screen-height #f
       (lambda (c)
         (play-sound "notfound.wav")
         (game-modify-data
          (lambda (d)
            (record-click c 0)
            (nightjar-modify-sprite
             (sprite (- (game-mx c) 126)
                     (- (game-my c) 105)
                     "wrong.png" (+ (game-time c) 2000)) d))
          c)))

      ) c))))

(define (nightjar-fail desc reason c)
  (game-modify-render
   (lambda (ctx)
     (define example (car (nightjar-images (game-data c))))

     (ctx.drawImage
      (find-image (photo-filename example))
      0 0)

     ;; highlight the crab
     (set! ctx.strokeStyle "#ffff00")
     (set! ctx.lineWidth 4)
     (ctx.strokeRect
      100 100
      100 100)
     (set! ctx.lineWidth 1)

     (sprite-render
      ctx
      (game-time c)
      (nightjar-sprite (game-data c)))

     (set! ctx.font "normal 30pt open-sans")
     (nightjar-all-text ctx reason)
     (set! ctx.font "normal 30pt open-sans"))

   (game-modify-update
    (lambda (t c) c)

    (game-modify-buttons
     (list

      (image-button
       "Next crab"
       (- default-button-x button-gap)
       (+ default-button-y 50) "slidy"
       (button-image)
       (lambda (c)
         (play-sound "button.wav")
         ;; check end of game
         (if (eq? (length (nightjar-images (game-data c))) 1)
             (nightjar-get-score c "Well done!")
             (nightjar-new-game-reset-timer 1 c))))

      (image-button
       "Quit game"
       (+ default-button-x button-gap)
       (+ default-button-y 50) "slidy"
       (button-image)
       (lambda (c)
         (play-sound "button.wav")
         ;; check end of game
         (nightjar-get-score c "Thank you for playing.")))


      ) c))))

(define (nightjar-win desc c)
  (game-modify-render
   (lambda (ctx)
     (define example (car (nightjar-images (game-data c))))

     (ctx.drawImage
      (find-image (photo-filename example) image-lib)
      0 0)

     (sprite-render
      ctx
      (game-time c)
      (nightjar-sprite (game-data c)))

     (let ((done (+ (- 20 (length (nightjar-images (game-data c)))) 1)))
       (nightjar-all-text
        ctx (+ "You caught this crab from " desc " in "
               (/ (nightjar-score (game-data c)) 1000)
               " seconds. " (- 20 done) " left to go!")))
     (set! ctx.font "normal 30pt open-sans"))

   (game-modify-update
    (lambda (t c) c)

    (game-modify-buttons
     (list
      (image-button
       "Next crab"
       default-button-x
       (+ default-button-y 50) "slidy"
       (button-image)
       (lambda (c)
         (play-sound "button.wav")
         ;; check end of game
         (if (eq? (length (nightjar-images (game-data c))) 1)
             (nightjar-get-score c "Well done!")
             (nightjar-new-game-reset-timer 1 c))))
      ) c))))

(define (nightjar-get-score c reason)
  (server-call-mutate
   "score"
   (list
    (list "player_id" (nightjar-player-id (game-data c)))
    (list "level" (if (eq? (nightjar-level (game-data c)) 0) "easy" "hard")))
   (lambda (game data)
     (let ((score (JSON.parse data)))
       (nightjar-finish game
                        (list-ref score 0)
                        (list-ref score 1)
                        (list-ref score 2)
                        reason))))
  c)

(define (score-to-text score)
  (cond
   ((eq? score 1) "1st")
   ((eq? score 2) "2nd")
   ((eq? score 3) "3rd")
   (else (+ score "th"))))

(define (get-score-text score count)
  (if (> count 5)
      (+ " You made position " score)
      "Find more crabs to get a ranking."))

(define (trunc a)
  (/ (Math.floor (* a 100)) 100))

(define (nightjar-finish c av score count reason)
  (game-modify-render
   (lambda (ctx)

     (nightjar-all-text
      ctx (+ reason " Your average crab spotting time is " (trunc (/ av 1000)) " seconds."))

     (wrap-text ctx (get-score-text score count) 0 430 1000 75))

   (game-modify-update
    (lambda (t c) c)

    (game-modify-buttons
     (list
      (if (> count 5)
          (image-button
           "Enter Your Name"
           default-button-x
           (+ default-button-y 200)
           "slidy"
           (button-image)
           (lambda (c)
             (play-sound "button.wav")
             (nightjar-enter-name c)))

          (image-button
           "Back"
           default-button-x
           (+ default-button-y 200)
           "slidy"
           (button-image)
           (lambda (c)
             (play-sound "button.wav")
             (nightjar-intro c)))))
     c))))


(define (type-into str ch)
  (car
   (foldl
    (lambda (c r)
      (if (and (not (cadr r)) (eq? c "?"))
          (list (string-append (car r) ch) #t)
          (list (string-append (car r) c) (cadr r))))
    (list "" #f)
    (str.split ""))))

(define (type-into-delete str)
  (car (foldl
        (lambda (c r)
          ;;(console.log (list c r))
          (if (and (not (cadr r)) (not (eq? c "?")))
              (list (string-append "?" (car r)) #t)
              (list (string-append c (car r)) (cadr r))))
        (list "" #f)
        (reverse (str.split "")))))

(define (type-username ch c)
  (game-modify-data
   (lambda (d)
     (nightjar-modify-username (dbg (type-into (dbg (nightjar-username d)) ch)) d))
   c))

(define (type-delete c)
  (game-modify-data
   (lambda (d)
     (nightjar-modify-username (type-into-delete (nightjar-username d)) d))
   c))

(define (nightjar-enter-name c)
  (game-modify-update
   (lambda (t c) c)
   (game-modify-render
    (lambda (ctx)
      (set! ctx.font "normal 30pt open-sans")
      (wrap-shadow-text ctx "Enter your name" 0 200 1000 70)
      (set! ctx.font "normal 50pt open-sans")
      (wrap-shadow-text ctx (nightjar-username (game-data c)) 0 280 1000 70)
      (set! ctx.font "normal 30pt open-sans"))

    (game-modify-buttons
     (append
      (index-map
       (lambda (i ch)
         (let ((x (+ 100 (* (modulo i 10) 105)))
               (y (+ 400 (* (Math.floor (/ i 10)) 130))))
           (image-button ch x y #f (small-button-image)
                         (lambda (c) (type-username ch c)))))
       (list "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M"
             "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"))

      (list
       (image-button "Delete" 850 700 #t (button-image)
                     (lambda (c) (type-delete c)))

       (image-button "Done" 1100 700 "slidy" (button-image)
                     (lambda (c)
                       (server-call
                        "player-name"
                        (list
                         (list "player_id" (nightjar-player-id (game-data c)))
                         (list "player_name" (nightjar-username (game-data c)))))
                       (nightjar-intro c))))
      )
     c))))








(set! ctx.font "normal 75pt open-sans")
(centre-text ctx "Loading..." 240)

(load-sounds!
 (list
  "button.wav"
  "found.wav"
  "notfound.wav"
  ))


(load-images!
 (list "button-1.png"
       "button-s1.png"
       "quit.png"
       "right.png"
       "wrong.png"
       "foam.png"
       "sensory-ecology.png"
       "example-crab.jpg")
 (lambda ()
   (start-game canvas ctx)))
